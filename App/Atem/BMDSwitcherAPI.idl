/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

/* BMDSwitcherAPI.idl */

import "unknwn.idl";

[uuid(8A92B919-156C-4D61-94EF-03F9BE4004B0),
version(1.0), helpstring("Blackmagic Switcher API Library")]
library BMDSwitcherAPI
{

// Type Declarations

typedef long long BMDSwitcherInputId;
typedef struct { unsigned char data[16]; } BMDSwitcherHash;
typedef long long BMDSwitcherAudioInputId;
typedef long long BMDSwitcherFairlightAudioSourceId;
typedef unsigned int BMDSwitcherRecordDiskId;
typedef long long BMDSwitcherHyperDeckClipId;
typedef long long BMDSwitcherHyperDeckId;

// Enumeration Mapping

cpp_quote("#if 0")
cpp_quote("#endif")

/* Enum BMDSwitcherInputEventType - Used in IBMDSwitcherInputCallback */

typedef [v1_enum] enum _BMDSwitcherInputEventType {
    bmdSwitcherInputEventTypeShortNameChanged                    = /* 'shnm' */ 0x73686E6D,
    bmdSwitcherInputEventTypeLongNameChanged                     = /* 'lgnm' */ 0x6C676E6D,
    bmdSwitcherInputEventTypeAreNamesDefaultChanged              = /* 'andc' */ 0x616E6463,
    bmdSwitcherInputEventTypeIsProgramTalliedChanged             = /* 'ipgt' */ 0x69706774,
    bmdSwitcherInputEventTypeIsPreviewTalliedChanged             = /* 'iprt' */ 0x69707274,
    bmdSwitcherInputEventTypeAvailableExternalPortTypesChanged   = /* 'aept' */ 0x61657074,
    bmdSwitcherInputEventTypeCurrentExternalPortTypeChanged      = /* 'cept' */ 0x63657074
} BMDSwitcherInputEventType;

/* Enum BMDSwitcherPortType - IBMDSwitcherInput Port Types */

typedef [v1_enum] enum _BMDSwitcherPortType {
    bmdSwitcherPortTypeExternal                                  = /* 'extn' */ 0x6578746E,
    bmdSwitcherPortTypeBlack                                     = /* 'blak' */ 0x626C616B,
    bmdSwitcherPortTypeColorBars                                 = /* 'colb' */ 0x636F6C62,
    bmdSwitcherPortTypeColorGenerator                            = /* 'colg' */ 0x636F6C67,
    bmdSwitcherPortTypeMediaPlayerFill                           = /* 'mpfl' */ 0x6D70666C,
    bmdSwitcherPortTypeMediaPlayerCut                            = /* 'mpct' */ 0x6D706374,
    bmdSwitcherPortTypeSuperSource                               = /* 'ssrc' */ 0x73737263,
    bmdSwitcherPortTypeMixEffectBlockOutput                      = /* 'mebo' */ 0x6D65626F,
    bmdSwitcherPortTypeAuxOutput                                 = /* 'auxo' */ 0x6175786F,
    bmdSwitcherPortTypeKeyCutOutput                              = /* 'kcto' */ 0x6B63746F,
    bmdSwitcherPortTypeMultiview                                 = /* 'mlvw' */ 0x6D6C7677,
    bmdSwitcherPortTypeExternalDirect                            = /* 'edir' */ 0x65646972
} BMDSwitcherPortType;

/* Enum BMDSwitcherExternalPortType - IBMDSwitcherInput External Port Types */

typedef [v1_enum] enum _BMDSwitcherExternalPortType {
    bmdSwitcherExternalPortTypeSDI                               = 0x00000001,
    bmdSwitcherExternalPortTypeHDMI                              = 0x00000002,
    bmdSwitcherExternalPortTypeComponent                         = 0x00000004,
    bmdSwitcherExternalPortTypeComposite                         = 0x00000008,
    bmdSwitcherExternalPortTypeSVideo                            = 0x00000010,
    bmdSwitcherExternalPortTypeInternal                          = 0x00000020,
    bmdSwitcherExternalPortTypeXLR                               = 0x00000040,
    bmdSwitcherExternalPortTypeAESEBU                            = 0x00000080,
    bmdSwitcherExternalPortTypeRCA                               = 0x00000100,
    bmdSwitcherExternalPortTypeTSJack                            = 0x00000200,
    bmdSwitcherExternalPortTypeMADI                              = 0x00000400,
    bmdSwitcherExternalPortTypeTRS                               = 0x00000800
} BMDSwitcherExternalPortType;

/* Enum BMDSwitcherInputAvailability - IBMDSwitcherInput availablity bits */

typedef [v1_enum] enum _BMDSwitcherInputAvailability {
    bmdSwitcherInputAvailabilityMixEffectBlock0                  = 0x00000001,
    bmdSwitcherInputAvailabilityMixEffectBlock1                  = 0x00000002,
    bmdSwitcherInputAvailabilityMixEffectBlock2                  = 0x00000080,
    bmdSwitcherInputAvailabilityMixEffectBlock3                  = 0x00000100,
    bmdSwitcherInputAvailabilityAuxOutputs                       = 0x00000004,
    bmdSwitcherInputAvailabilityMultiView                        = 0x00000008,
    bmdSwitcherInputAvailabilitySuperSourceArt                   = 0x00000010,
    bmdSwitcherInputAvailabilitySuperSourceBox                   = 0x00000020,
    bmdSwitcherInputAvailabilityInputCut                         = 0x00000040
} BMDSwitcherInputAvailability;

/* Enum BMDSwitcherEventType - IBMDSwitcher event type */

typedef [v1_enum] enum _BMDSwitcherEventType {
    bmdSwitcherEventTypeVideoModeChanged                         = /* 'sevd' */ 0x73657664,
    bmdSwitcherEventTypeMethodForDownConvertedSDChanged          = /* 'semd' */ 0x73656D64,
    bmdSwitcherEventTypeDownConvertedHDVideoModeChanged          = /* 'sedV' */ 0x73656456,
    bmdSwitcherEventTypeMultiViewVideoModeChanged                = /* 'semv' */ 0x73656D76,
    bmdSwitcherEventTypePowerStatusChanged                       = /* 'sepw' */ 0x73657077,
    bmdSwitcherEventTypeDisconnected                             = /* 'sedi' */ 0x73656469,
    bmdSwitcherEventType3GSDIOutputLevelChanged                  = /* 'se3g' */ 0x73653367,
    bmdSwitcherEventTypeTimeCodeChanged                          = /* 'setc' */ 0x73657463,
    bmdSwitcherEventTypeTimeCodeLockedChanged                    = /* 'tclc' */ 0x74636C63,
    bmdSwitcherEventTypeTimeCodeModeChanged                      = /* 'tcmc' */ 0x74636D63,
    bmdSwitcherEventTypeSuperSourceCascadeChanged                = /* 'sscc' */ 0x73736363,
    bmdSwitcherEventTypeAutoVideoModeChanged                     = /* 'aivm' */ 0x6169766D,
    bmdSwitcherEventTypeAutoVideoModeDetectedChanged             = /* 'avmd' */ 0x61766D64
} BMDSwitcherEventType;

/* Enum BMDSwitcherInputColorEventType - Used in IBMDSwitcherInputColorCallback */

typedef [v1_enum] enum _BMDSwitcherInputColorEventType {
    bmdSwitcherInputColorEventTypeHueChanged                     = /* 'HueC' */ 0x48756543,
    bmdSwitcherInputColorEventTypeSaturationChanged              = /* 'SatC' */ 0x53617443,
    bmdSwitcherInputColorEventTypeLumaChanged                    = /* 'LumC' */ 0x4C756D43
} BMDSwitcherInputColorEventType;

/* Enum BMDSwitcherInputAuxEventType - Used in IBMDSwitcherInputAuxCallback */

typedef [v1_enum] enum _BMDSwitcherInputAuxEventType {
    bmdSwitcherInputAuxEventTypeInputSourceChanged               = /* 'ipsC' */ 0x69707343
} BMDSwitcherInputAuxEventType;

/* Enum BMDSwitcherSuperSourceBoxEventType - Used in IBMDSwitcherSuperSourceBoxCallback */

typedef [v1_enum] enum _BMDSwitcherSuperSourceBoxEventType {
    bmdSwitcherSuperSourceBoxEventTypeEnabledChanged             = /* 'enbC' */ 0x656E6243,
    bmdSwitcherSuperSourceBoxEventTypeInputSourceChanged         = /* 'ipsC' */ 0x69707343,
    bmdSwitcherSuperSourceBoxEventTypePositionXChanged           = /* 'psxC' */ 0x70737843,
    bmdSwitcherSuperSourceBoxEventTypePositionYChanged           = /* 'psyC' */ 0x70737943,
    bmdSwitcherSuperSourceBoxEventTypeSizeChanged                = /* 'sizC' */ 0x73697A43,
    bmdSwitcherSuperSourceBoxEventTypeCroppedChanged             = /* 'crpC' */ 0x63727043,
    bmdSwitcherSuperSourceBoxEventTypeCropTopChanged             = /* 'cptC' */ 0x63707443,
    bmdSwitcherSuperSourceBoxEventTypeCropBottomChanged          = /* 'cpbC' */ 0x63706243,
    bmdSwitcherSuperSourceBoxEventTypeCropLeftChanged            = /* 'cplC' */ 0x63706C43,
    bmdSwitcherSuperSourceBoxEventTypeCropRightChanged           = /* 'cprC' */ 0x63707243
} BMDSwitcherSuperSourceBoxEventType;

/* Enum BMDSwitcherInputSuperSourceEventType - Used in IBMDSwitcherInputSuperSourceCallback */

typedef [v1_enum] enum _BMDSwitcherInputSuperSourceEventType {
    bmdSwitcherInputSuperSourceEventTypeInputFillChanged         = /* 'ipfC' */ 0x69706643,
    bmdSwitcherInputSuperSourceEventTypeInputCutChanged          = /* 'ipcC' */ 0x69706343,
    bmdSwitcherInputSuperSourceEventTypeArtOptionChanged         = /* 'atoC' */ 0x61746F43,
    bmdSwitcherInputSuperSourceEventTypePreMultipliedChanged     = /* 'shpC' */ 0x73687043,
    bmdSwitcherInputSuperSourceEventTypeClipChanged              = /* 'clpC' */ 0x636C7043,
    bmdSwitcherInputSuperSourceEventTypeGainChanged              = /* 'ganC' */ 0x67616E43,
    bmdSwitcherInputSuperSourceEventTypeInverseChanged           = /* 'invC' */ 0x696E7643
} BMDSwitcherInputSuperSourceEventType;

/* Enum BMDSwitcherSuperSourceBorderEventType - Used in IBMDSwitcherSuperSourceBorderCallback */

typedef [v1_enum] enum _BMDSwitcherSuperSourceBorderEventType {
    bmdSwitcherSuperSourceBorderEventTypeEnabledChanged          = /* 'enbC' */ 0x656E6243,
    bmdSwitcherSuperSourceBorderEventTypeBevelChanged            = /* 'bvlC' */ 0x62766C43,
    bmdSwitcherSuperSourceBorderEventTypeWidthOutChanged         = /* 'wdoC' */ 0x77646F43,
    bmdSwitcherSuperSourceBorderEventTypeWidthInChanged          = /* 'wdiC' */ 0x77646943,
    bmdSwitcherSuperSourceBorderEventTypeSoftnessOutChanged      = /* 'sfoC' */ 0x73666F43,
    bmdSwitcherSuperSourceBorderEventTypeSoftnessInChanged       = /* 'sfiC' */ 0x73666943,
    bmdSwitcherSuperSourceBorderEventTypeBevelSoftnessChanged    = /* 'bvsC' */ 0x62767343,
    bmdSwitcherSuperSourceBorderEventTypeBevelPositionChanged    = /* 'bvpC' */ 0x62767043,
    bmdSwitcherSuperSourceBorderEventTypeHueChanged              = /* 'hueC' */ 0x68756543,
    bmdSwitcherSuperSourceBorderEventTypeSaturationChanged       = /* 'satC' */ 0x73617443,
    bmdSwitcherSuperSourceBorderEventTypeLumaChanged             = /* 'lumC' */ 0x6C756D43,
    bmdSwitcherSuperSourceBorderEventTypeLightSourceDirectionChanged = /* 'lsdC' */ 0x6C736443,
    bmdSwitcherSuperSourceBorderEventTypeLightSourceAltitudeChanged = /* 'lsaC' */ 0x6C736143
} BMDSwitcherSuperSourceBorderEventType;

/* Enum BMDSwitcherBorderBevelOption - Border Bevel Option for DVE Key and SuperSource Box */

typedef [v1_enum] enum _BMDSwitcherBorderBevelOption {
    bmdSwitcherBorderBevelOptionNone                             = /* 'none' */ 0x6E6F6E65,
    bmdSwitcherBorderBevelOptionInOut                            = /* 'inot' */ 0x696E6F74,
    bmdSwitcherBorderBevelOptionIn                               = /* 'inin' */ 0x696E696E,
    bmdSwitcherBorderBevelOptionOut                              = /* 'otot' */ 0x6F746F74
} BMDSwitcherBorderBevelOption;

/* Enum BMDSwitcherTransitionMixParametersEventType - Used in IBMDSwitcherTransitionMixParametersCallback */

typedef [v1_enum] enum _BMDSwitcherTransitionMixParametersEventType {
    bmdSwitcherTransitionMixParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543
} BMDSwitcherTransitionMixParametersEventType;

/* Enum BMDSwitcherTransitionDipParametersEventType - Used in IBMDSwitcherTransitionDipParametersCallback */

typedef [v1_enum] enum _BMDSwitcherTransitionDipParametersEventType {
    bmdSwitcherTransitionDipParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionDipParametersEventTypeInputDipChanged   = /* 'ipdC' */ 0x69706443
} BMDSwitcherTransitionDipParametersEventType;

/* Enum BMDSwitcherTransitionWipeParametersEventType - Used in IBMDSwitcherTransitionWipeParametersCallback */

typedef [v1_enum] enum _BMDSwitcherTransitionWipeParametersEventType {
    bmdSwitcherTransitionWipeParametersEventTypeRateChanged      = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionWipeParametersEventTypePatternChanged   = /* 'patC' */ 0x70617443,
    bmdSwitcherTransitionWipeParametersEventTypeBorderSizeChanged = /* 'bdsC' */ 0x62647343,
    bmdSwitcherTransitionWipeParametersEventTypeInputBorderChanged = /* 'ipbC' */ 0x69706243,
    bmdSwitcherTransitionWipeParametersEventTypeSymmetryChanged  = /* 'symC' */ 0x73796D43,
    bmdSwitcherTransitionWipeParametersEventTypeSoftnessChanged  = /* 'sftC' */ 0x73667443,
    bmdSwitcherTransitionWipeParametersEventTypeHorizontalOffsetChanged = /* 'hofC' */ 0x686F6643,
    bmdSwitcherTransitionWipeParametersEventTypeVerticalOffsetChanged = /* 'vofC' */ 0x766F6643,
    bmdSwitcherTransitionWipeParametersEventTypeReverseChanged   = /* 'revC' */ 0x72657643,
    bmdSwitcherTransitionWipeParametersEventTypeFlipFlopChanged  = /* 'ffpC' */ 0x66667043
} BMDSwitcherTransitionWipeParametersEventType;

/* Enum BMDSwitcherTransitionDVEParametersEventType - Used in IBMDSwitcherTransitionDVEParametersCallback */

typedef [v1_enum] enum _BMDSwitcherTransitionDVEParametersEventType {
    bmdSwitcherTransitionDVEParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionDVEParametersEventTypeLogoRateChanged   = /* 'lrtC' */ 0x6C727443,
    bmdSwitcherTransitionDVEParametersEventTypeReverseChanged    = /* 'revC' */ 0x72657643,
    bmdSwitcherTransitionDVEParametersEventTypeFlipFlopChanged   = /* 'ffpC' */ 0x66667043,
    bmdSwitcherTransitionDVEParametersEventTypeStyleChanged      = /* 'styC' */ 0x73747943,
    bmdSwitcherTransitionDVEParametersEventTypeInputFillChanged  = /* 'ipfC' */ 0x69706643,
    bmdSwitcherTransitionDVEParametersEventTypeInputCutChanged   = /* 'ipcC' */ 0x69706343,
    bmdSwitcherTransitionDVEParametersEventTypeEnableKeyChanged  = /* 'enkC' */ 0x656E6B43,
    bmdSwitcherTransitionDVEParametersEventTypePreMultipliedChanged = /* 'pmuC' */ 0x706D7543,
    bmdSwitcherTransitionDVEParametersEventTypeClipChanged       = /* 'clpC' */ 0x636C7043,
    bmdSwitcherTransitionDVEParametersEventTypeGainChanged       = /* 'gneC' */ 0x676E6543,
    bmdSwitcherTransitionDVEParametersEventTypeInverseChanged    = /* 'invC' */ 0x696E7643
} BMDSwitcherTransitionDVEParametersEventType;

/* Enum BMDSwitcherTransitionStingerParametersEventType - Used in IBMDSwitcherTransitionStingerParametersCallback */

typedef [v1_enum] enum _BMDSwitcherTransitionStingerParametersEventType {
    bmdSwitcherTransitionStingerParametersEventTypeSourceChanged = /* 'srcC' */ 0x73726343,
    bmdSwitcherTransitionStingerParametersEventTypePreMultipliedChanged = /* 'pmuC' */ 0x706D7543,
    bmdSwitcherTransitionStingerParametersEventTypeClipChanged   = /* 'clpC' */ 0x636C7043,
    bmdSwitcherTransitionStingerParametersEventTypeGainChanged   = /* 'gneC' */ 0x676E6543,
    bmdSwitcherTransitionStingerParametersEventTypeInverseChanged = /* 'invC' */ 0x696E7643,
    bmdSwitcherTransitionStingerParametersEventTypePrerollChanged = /* 'prlC' */ 0x70726C43,
    bmdSwitcherTransitionStingerParametersEventTypeClipDurationChanged = /* 'cdrC' */ 0x63647243,
    bmdSwitcherTransitionStingerParametersEventTypeTriggerPointChanged = /* 'tgpC' */ 0x74677043,
    bmdSwitcherTransitionStingerParametersEventTypeMixRateChanged = /* 'mxrC' */ 0x6D787243
} BMDSwitcherTransitionStingerParametersEventType;

/* Enum BMDSwitcherTransitionParametersEventType - Used in IBMDSwitcherTransitionParametersCallback */

typedef [v1_enum] enum _BMDSwitcherTransitionParametersEventType {
    bmdSwitcherTransitionParametersEventTypeTransitionStyleChanged = /* 'styC' */ 0x73747943,
    bmdSwitcherTransitionParametersEventTypeNextTransitionStyleChanged = /* 'nstC' */ 0x6E737443,
    bmdSwitcherTransitionParametersEventTypeTransitionSelectionChanged = /* 'sltC' */ 0x736C7443,
    bmdSwitcherTransitionParametersEventTypeNextTransitionSelectionChanged = /* 'nslC' */ 0x6E736C43
} BMDSwitcherTransitionParametersEventType;

/* Enum BMDSwitcherSuperSourceArtOption - SuperSource Art Option */

typedef [v1_enum] enum _BMDSwitcherSuperSourceArtOption {
    bmdSwitcherSuperSourceArtOptionBackground                    = /* 'bkgd' */ 0x626B6764,
    bmdSwitcherSuperSourceArtOptionForeground                    = /* 'frgd' */ 0x66726764
} BMDSwitcherSuperSourceArtOption;

/* Enum BMDSwitcherMixEffectBlockEventType - Used in IBMDSwitcherMixEffectBlockCallback */

typedef [v1_enum] enum _BMDSwitcherMixEffectBlockEventType {
    bmdSwitcherMixEffectBlockEventTypeProgramInputChanged        = /* 'pgiC' */ 0x70676943,
    bmdSwitcherMixEffectBlockEventTypePreviewInputChanged        = /* 'pviC' */ 0x70766943,
    bmdSwitcherMixEffectBlockEventTypeTransitionPositionChanged  = /* 'tspC' */ 0x74737043,
    bmdSwitcherMixEffectBlockEventTypeTransitionFramesRemainingChanged = /* 'tfrC' */ 0x74667243,
    bmdSwitcherMixEffectBlockEventTypeInTransitionChanged        = /* 'iitC' */ 0x69697443,
    bmdSwitcherMixEffectBlockEventTypeFadeToBlackFramesRemainingChanged = /* 'ffrC' */ 0x66667243,
    bmdSwitcherMixEffectBlockEventTypeInFadeToBlackChanged       = /* 'ifbC' */ 0x69666243,
    bmdSwitcherMixEffectBlockEventTypePreviewLiveChanged         = /* 'pvlC' */ 0x70766C43,
    bmdSwitcherMixEffectBlockEventTypePreviewTransitionChanged   = /* 'pvtC' */ 0x70767443,
    bmdSwitcherMixEffectBlockEventTypeInputAvailabilityMaskChanged = /* 'avmC' */ 0x61766D43,
    bmdSwitcherMixEffectBlockEventTypeFadeToBlackRateChanged     = /* 'fbrC' */ 0x66627243,
    bmdSwitcherMixEffectBlockEventTypeFadeToBlackFullyBlackChanged = /* 'fbbC' */ 0x66626243,
    bmdSwitcherMixEffectBlockEventTypeFadeToBlackInTransitionChanged = /* 'fbtC' */ 0x66627443
} BMDSwitcherMixEffectBlockEventType;

/* Enum BMDSwitcherAudioMonitorOutputEventType - Used in IBMDSwitcherAudioMonitorOutputCallback */

typedef [v1_enum] enum _BMDSwitcherAudioMonitorOutputEventType {
    bmdSwitcherAudioMonitorOutputEventTypeMonitorEnableChanged   = /* 'mneC' */ 0x6D6E6543,
    bmdSwitcherAudioMonitorOutputEventTypeGainChanged            = /* 'mgnC' */ 0x6D676E43,
    bmdSwitcherAudioMonitorOutputEventTypeMuteChanged            = /* 'mteC' */ 0x6D746543,
    bmdSwitcherAudioMonitorOutputEventTypeSoloChanged            = /* 'solC' */ 0x736F6C43,
    bmdSwitcherAudioMonitorOutputEventTypeSoloInputChanged       = /* 'sliC' */ 0x736C6943,
    bmdSwitcherAudioMonitorOutputEventTypeDimChanged             = /* 'dimC' */ 0x64696D43,
    bmdSwitcherAudioMonitorOutputEventTypeDimLevelChanged        = /* 'dmlC' */ 0x646D6C43
} BMDSwitcherAudioMonitorOutputEventType;

/* Enum BMDSwitcherAudioInputEventType - Used in IBMDSwitcherAudioInputCallback */

typedef [v1_enum] enum _BMDSwitcherAudioInputEventType {
    bmdSwitcherAudioInputEventTypeCurrentExternalPortTypeChanged = /* 'eptC' */ 0x65707443,
    bmdSwitcherAudioInputEventTypeMixOptionChanged               = /* 'mxoC' */ 0x6D786F43,
    bmdSwitcherAudioInputEventTypeGainChanged                    = /* 'ignC' */ 0x69676E43,
    bmdSwitcherAudioInputEventTypeBalanceChanged                 = /* 'balC' */ 0x62616C43,
    bmdSwitcherAudioInputEventTypeIsMixedInChanged               = /* 'imiC' */ 0x696D6943
} BMDSwitcherAudioInputEventType;

/* Enum BMDSwitcherAudioMixerEventType - Used in IBMDSwitcherAudioMixerCallback */

typedef [v1_enum] enum _BMDSwitcherAudioMixerEventType {
    bmdSwitcherAudioMixerEventTypeProgramOutGainChanged          = /* 'pgnC' */ 0x70676E43,
    bmdSwitcherAudioMixerEventTypeProgramOutBalanceChanged       = /* 'balC' */ 0x62616C43,
    bmdSwitcherAudioMixerEventTypeProgramOutFollowFadeToBlackChanged = /* 'ffbC' */ 0x66666243,
    bmdSwitcherAudioMixerEventTypeAudioFollowVideoCrossfadeTransitionChanged = /* 'aftC' */ 0x61667443
} BMDSwitcherAudioMixerEventType;

/* Enum BMDSwitcherAudioInputType - Audio Input Type */

typedef [v1_enum] enum _BMDSwitcherAudioInputType {
    bmdSwitcherAudioInputTypeEmbeddedWithVideo                   = /* 'ewvd' */ 0x65777664,
    bmdSwitcherAudioInputTypeMediaPlayer                         = /* 'mdpy' */ 0x6D647079,
    bmdSwitcherAudioInputTypeAudioIn                             = /* 'adin' */ 0x6164696E
} BMDSwitcherAudioInputType;

/* Enum BMDSwitcherAudioMixOption - Audio Mix Option */

typedef [v1_enum] enum _BMDSwitcherAudioMixOption {
    bmdSwitcherAudioMixOptionOff                                 = /* 'offf' */ 0x6F666666,
    bmdSwitcherAudioMixOptionOn                                  = /* 'onon' */ 0x6F6E6F6E,
    bmdSwitcherAudioMixOptionAudioFollowVideo                    = /* 'afvv' */ 0x61667676
} BMDSwitcherAudioMixOption;

/* Enum BMDSwitcherTalkbackId - Talkback Id */

typedef [v1_enum] enum _BMDSwitcherTalkbackId {
    bmdSwitcherTalkbackIdProduction                              = /* 'prod' */ 0x70726F64,
    bmdSwitcherTalkbackIdEngineering                             = /* 'engg' */ 0x656E6767
} BMDSwitcherTalkbackId;

/* Enum BMDSwitcherTalkbackEventType - Used in IBMDSwitcherTalkbackCallback */

typedef [v1_enum] enum _BMDSwitcherTalkbackEventType {
    bmdSwitcherTalkbackEventTypeMuteSDIChanged                   = /* 'tmsC' */ 0x746D7343,
    bmdSwitcherTalkbackEventTypeInputMuteSDIChanged              = /* 'imsC' */ 0x696D7343,
    bmdSwitcherTalkbackEventTypeCurrentInputSupportsMuteSDIChanged = /* 'ismC' */ 0x69736D43
} BMDSwitcherTalkbackEventType;

/* Enum BMDSwitcherAudioHeadphoneOutputEventType - Used in IBMDSwitcherAudioHeadphoneOutputCallback */

typedef [v1_enum] enum _BMDSwitcherAudioHeadphoneOutputEventType {
    bmdSwitcherAudioHeadphoneOutputEventTypeGainChanged          = /* 'hogC' */ 0x686F6743,
    bmdSwitcherAudioHeadphoneOutputEventTypeInputProgramOutGainChanged = /* 'hopC' */ 0x686F7043,
    bmdSwitcherAudioHeadphoneOutputEventTypeInputTalkbackGainChanged = /* 'hotC' */ 0x686F7443,
    bmdSwitcherAudioHeadphoneOutputEventTypeInputSidetoneGainChanged = /* 'hosC' */ 0x686F7343
} BMDSwitcherAudioHeadphoneOutputEventType;

/* Enum BMDSwitcherFairlightAudioLimiterEventType - Used in IBMDSwitcherFairlightAudioLimiterCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioLimiterEventType {
    bmdSwitcherFairlightAudioLimiterEventTypeEnabledChanged      = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioLimiterEventTypeThresholdChanged    = /* 'thrC' */ 0x74687243,
    bmdSwitcherFairlightAudioLimiterEventTypeAttackChanged       = /* 'atkC' */ 0x61746B43,
    bmdSwitcherFairlightAudioLimiterEventTypeHoldChanged         = /* 'hldC' */ 0x686C6443,
    bmdSwitcherFairlightAudioLimiterEventTypeReleaseChanged      = /* 'rlsC' */ 0x726C7343
} BMDSwitcherFairlightAudioLimiterEventType;

/* Enum BMDSwitcherFairlightAudioCompressorEventType - Used in IBMDSwitcherFairlightAudioCompressorCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioCompressorEventType {
    bmdSwitcherFairlightAudioCompressorEventTypeEnabledChanged   = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioCompressorEventTypeThresholdChanged = /* 'thrC' */ 0x74687243,
    bmdSwitcherFairlightAudioCompressorEventTypeRatioChanged     = /* 'rtoC' */ 0x72746F43,
    bmdSwitcherFairlightAudioCompressorEventTypeAttackChanged    = /* 'atkC' */ 0x61746B43,
    bmdSwitcherFairlightAudioCompressorEventTypeHoldChanged      = /* 'hldC' */ 0x686C6443,
    bmdSwitcherFairlightAudioCompressorEventTypeReleaseChanged   = /* 'rlsC' */ 0x726C7343
} BMDSwitcherFairlightAudioCompressorEventType;

/* Enum BMDSwitcherFairlightAudioExpanderEventType - Used in IBMDSwitcherFairlightAudioExpanderCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioExpanderEventType {
    bmdSwitcherFairlightAudioExpanderEventTypeEnabledChanged     = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioExpanderEventTypeGateModeChanged    = /* 'gtmC' */ 0x67746D43,
    bmdSwitcherFairlightAudioExpanderEventTypeThresholdChanged   = /* 'thrC' */ 0x74687243,
    bmdSwitcherFairlightAudioExpanderEventTypeRangeChanged       = /* 'rngC' */ 0x726E6743,
    bmdSwitcherFairlightAudioExpanderEventTypeRatioChanged       = /* 'rtoC' */ 0x72746F43,
    bmdSwitcherFairlightAudioExpanderEventTypeAttackChanged      = /* 'atkC' */ 0x61746B43,
    bmdSwitcherFairlightAudioExpanderEventTypeHoldChanged        = /* 'hldC' */ 0x686C6443,
    bmdSwitcherFairlightAudioExpanderEventTypeReleaseChanged     = /* 'rlsC' */ 0x726C7343
} BMDSwitcherFairlightAudioExpanderEventType;

/* Enum BMDSwitcherFairlightAudioDynamicsProcessorEventType - Used in IBMDSwitcherFairlightAudioDynamicsProcessorCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioDynamicsProcessorEventType {
    bmdSwitcherFairlightAudioDynamicsProcessorEventTypeMakeupGainChanged = /* 'mugC' */ 0x6D756743
} BMDSwitcherFairlightAudioDynamicsProcessorEventType;

/* Enum BMDSwitcherFairlightAudioEqualizerBandEventType - Used in IBMDSwitcherFairlightAudioEqualizerBandCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioEqualizerBandEventType {
    bmdSwitcherFairlightAudioEqualizerBandEventTypeEnabledChanged = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeShapeChanged  = /* 'shpC' */ 0x73687043,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeFrequencyRangeChanged = /* 'fqrC' */ 0x66717243,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeFrequencyChanged = /* 'frqC' */ 0x66727143,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeGainChanged   = /* 'ganC' */ 0x67616E43,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeQFactorChanged = /* 'qftC' */ 0x71667443
} BMDSwitcherFairlightAudioEqualizerBandEventType;

/* Enum BMDSwitcherFairlightAudioEqualizerBandShape - Fairlight Audio Equalizer Band Shape */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioEqualizerBandShape {
    bmdSwitcherFairlightAudioEqualizerBandShapeLowShelf          = 0x0001,
    bmdSwitcherFairlightAudioEqualizerBandShapeLowPass           = 0x0002,
    bmdSwitcherFairlightAudioEqualizerBandShapeBandPass          = 0x0004,
    bmdSwitcherFairlightAudioEqualizerBandShapeNotch             = 0x0008,
    bmdSwitcherFairlightAudioEqualizerBandShapeHighPass          = 0x0010,
    bmdSwitcherFairlightAudioEqualizerBandShapeHighShelf         = 0x0020
} BMDSwitcherFairlightAudioEqualizerBandShape;

/* Enum BMDSwitcherFairlightAudioEqualizerBandFrequencyRange - Fairlight Audio Equalizer Band Frequency Range */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioEqualizerBandFrequencyRange {
    bmdSwitcherFairlightAudioEqualizerBandFrequencyRangeLow      = 0x0001,
    bmdSwitcherFairlightAudioEqualizerBandFrequencyRangeMidLow   = 0x0002,
    bmdSwitcherFairlightAudioEqualizerBandFrequencyRangeMidHigh  = 0x0004,
    bmdSwitcherFairlightAudioEqualizerBandFrequencyRangeHigh     = 0x0008
} BMDSwitcherFairlightAudioEqualizerBandFrequencyRange;

/* Enum BMDSwitcherFairlightAudioEqualizerEventType - Used in IBMDSwitcherFairlightAudioEqualizerCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioEqualizerEventType {
    bmdSwitcherFairlightAudioEqualizerEventTypeEnabledChanged    = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioEqualizerEventTypeGainChanged       = /* 'ganC' */ 0x67616E43
} BMDSwitcherFairlightAudioEqualizerEventType;

/* Enum BMDSwitcherFairlightAudioSourceEventType - Used in IBMDSwitcherFairlightAudioSourceCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioSourceEventType {
    bmdSwitcherFairlightAudioSourceEventTypeIsActiveChanged      = /* 'isaC' */ 0x69736143,
    bmdSwitcherFairlightAudioSourceEventTypeMaxDelayFramesChanged = /* 'mdfC' */ 0x6D646643,
    bmdSwitcherFairlightAudioSourceEventTypeDelayFramesChanged   = /* 'dlfC' */ 0x646C6643,
    bmdSwitcherFairlightAudioSourceEventTypeInputGainChanged     = /* 'ingC' */ 0x696E6743,
    bmdSwitcherFairlightAudioSourceEventTypeStereoSimulationIntensityChanged = /* 'ssiC' */ 0x73736943,
    bmdSwitcherFairlightAudioSourceEventTypePanChanged           = /* 'panC' */ 0x70616E43,
    bmdSwitcherFairlightAudioSourceEventTypeFaderGainChanged     = /* 'fdgC' */ 0x66646743,
    bmdSwitcherFairlightAudioSourceEventTypeMixOptionChanged     = /* 'mxoC' */ 0x6D786F43,
    bmdSwitcherFairlightAudioSourceEventTypeIsMixedInChanged     = /* 'imiC' */ 0x696D6943
} BMDSwitcherFairlightAudioSourceEventType;

/* Enum BMDSwitcherFairlightAudioSourceType - Fairlight Audio Source Type */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioSourceType {
    bmdSwitcherFairlightAudioSourceTypeMono                      = /* 'mono' */ 0x6D6F6E6F,
    bmdSwitcherFairlightAudioSourceTypeStereo                    = /* 'ster' */ 0x73746572
} BMDSwitcherFairlightAudioSourceType;

/* Enum BMDSwitcherFairlightAudioMixOption - Fairlight Audio Mix Option */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioMixOption {
    bmdSwitcherFairlightAudioMixOptionOff                        = 0x00000001,
    bmdSwitcherFairlightAudioMixOptionOn                         = 0x00000002,
    bmdSwitcherFairlightAudioMixOptionAudioFollowVideo           = 0x00000004
} BMDSwitcherFairlightAudioMixOption;

/* Enum BMDSwitcherFairlightAudioInputEventType - Used in IBMDSwitcherFairlightAudioInputCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioInputEventType {
    bmdSwitcherFairlightAudioInputEventTypeCurrentExternalPortTypeChanged = /* 'eptC' */ 0x65707443,
    bmdSwitcherFairlightAudioInputEventTypeConfigurationChanged  = /* 'cfgC' */ 0x63666743
} BMDSwitcherFairlightAudioInputEventType;

/* Enum BMDSwitcherFairlightAnalogAudioInputEventType - Used in IBMDSwitcherFairlightAnalogAudioInputCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAnalogAudioInputEventType {
    bmdSwitcherFairlightAnalogAudioInputEventTypeLevelChanged    = /* 'aalC' */ 0x61616C43
} BMDSwitcherFairlightAnalogAudioInputEventType;

/* Enum BMDSwitcherFairlightAudioAnalogInputLevel - Fairlight Analog Audio Input Level */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioAnalogInputLevel {
    bmdSwitcherFairlightAudioAnalogInputLevelMicrophone          = 0x00000001,
    bmdSwitcherFairlightAudioAnalogInputLevelConsumerLine        = 0x00000002,
    bmdSwitcherFairlightAudioAnalogInputLevelProLine             = 0x00000004
} BMDSwitcherFairlightAudioAnalogInputLevel;

/* Enum BMDSwitcherFairlightAudioInputType - Fairlight Audio Input Type */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioInputType {
    bmdSwitcherFairlightAudioInputTypeEmbeddedWithVideo          = /* 'ewvd' */ 0x65777664,
    bmdSwitcherFairlightAudioInputTypeMediaPlayer                = /* 'mdpy' */ 0x6D647079,
    bmdSwitcherFairlightAudioInputTypeAudioIn                    = /* 'adin' */ 0x6164696E,
    bmdSwitcherFairlightAudioInputTypeMADI                       = /* 'madi' */ 0x6D616469
} BMDSwitcherFairlightAudioInputType;

/* Enum BMDSwitcherFairlightAudioInputConfiguration - Fairlight Audio Input Configuration */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioInputConfiguration {
    bmdSwitcherFairlightAudioInputConfigurationMono              = 0x00000001,
    bmdSwitcherFairlightAudioInputConfigurationStereo            = 0x00000002,
    bmdSwitcherFairlightAudioInputConfigurationDualMono          = 0x00000004
} BMDSwitcherFairlightAudioInputConfiguration;

/* Enum BMDSwitcherFairlightAudioHeadphoneOutputEventType - Used in IBMDSwitcherFairlightAudioHeadphoneOutputCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioHeadphoneOutputEventType {
    bmdSwitcherFairlightAudioHeadphoneOutputEventTypeGainChanged = /* 'hogC' */ 0x686F6743,
    bmdSwitcherFairlightAudioHeadphoneOutputEventTypeInputMasterOutGainChanged = /* 'homC' */ 0x686F6D43,
    bmdSwitcherFairlightAudioHeadphoneOutputEventTypeInputTalkbackGainChanged = /* 'hotC' */ 0x686F7443,
    bmdSwitcherFairlightAudioHeadphoneOutputEventTypeInputSidetoneGainChanged = /* 'hosC' */ 0x686F7343
} BMDSwitcherFairlightAudioHeadphoneOutputEventType;

/* Enum BMDSwitcherFairlightAudioMixerEventType - Used in IBMDSwitcherFairlightAudioMixerCallback */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioMixerEventType {
    bmdSwitcherFairlightAudioMixerEventTypeMasterOutFaderGainChanged = /* 'fdgC' */ 0x66646743,
    bmdSwitcherFairlightAudioMixerEventTypeMasterOutFollowFadeToBlackChanged = /* 'ffbC' */ 0x66666243,
    bmdSwitcherFairlightAudioMixerEventTypeAudioFollowVideoCrossfadeTransitionChanged = /* 'aftC' */ 0x61667443
} BMDSwitcherFairlightAudioMixerEventType;

/* Enum BMDSwitcherTransitionStyle - Transition styles used in IBMDSwitcherTransitionParameters */

typedef [v1_enum] enum _BMDSwitcherTransitionStyle {
    bmdSwitcherTransitionStyleMix                                = /* 'mixx' */ 0x6D697878,
    bmdSwitcherTransitionStyleDip                                = /* 'dipp' */ 0x64697070,
    bmdSwitcherTransitionStyleWipe                               = /* 'wipe' */ 0x77697065,
    bmdSwitcherTransitionStyleDVE                                = /* 'dvee' */ 0x64766565,
    bmdSwitcherTransitionStyleStinger                            = /* 'stng' */ 0x73746E67
} BMDSwitcherTransitionStyle;

/* Enum BMDSwitcherTransitionSelection - Used in IBMDSwitcherTransitionParameters */

typedef [v1_enum] enum _BMDSwitcherTransitionSelection {
    bmdSwitcherTransitionSelectionBackground                     = 0x00000001,
    bmdSwitcherTransitionSelectionKey1                           = 0x00000002,
    bmdSwitcherTransitionSelectionKey2                           = 0x00000004,
    bmdSwitcherTransitionSelectionKey3                           = 0x00000008,
    bmdSwitcherTransitionSelectionKey4                           = 0x00000010
} BMDSwitcherTransitionSelection;

/* Enum BMDSwitcherKeyLumaParametersEventType - Used in IBMDSwitcherKeyLumaParametersCallback */

typedef [v1_enum] enum _BMDSwitcherKeyLumaParametersEventType {
    bmdSwitcherKeyLumaParametersEventTypePreMultipliedChanged    = /* 'pmlC' */ 0x706D6C43,
    bmdSwitcherKeyLumaParametersEventTypeClipChanged             = /* 'clpC' */ 0x636C7043,
    bmdSwitcherKeyLumaParametersEventTypeGainChanged             = /* 'gneC' */ 0x676E6543,
    bmdSwitcherKeyLumaParametersEventTypeInverseChanged          = /* 'invC' */ 0x696E7643
} BMDSwitcherKeyLumaParametersEventType;

/* Enum BMDSwitcherKeyChromaParametersEventType - Used in IBMDSwitcherKeyChromaParametersCallback */

typedef [v1_enum] enum _BMDSwitcherKeyChromaParametersEventType {
    bmdSwitcherKeyChromaParametersEventTypeHueChanged            = /* 'hueC' */ 0x68756543,
    bmdSwitcherKeyChromaParametersEventTypeGainChanged           = /* 'gneC' */ 0x676E6543,
    bmdSwitcherKeyChromaParametersEventTypeYSuppressChanged      = /* 'yspC' */ 0x79737043,
    bmdSwitcherKeyChromaParametersEventTypeLiftChanged           = /* 'lftC' */ 0x6C667443,
    bmdSwitcherKeyChromaParametersEventTypeNarrowChanged         = /* 'nrwC' */ 0x6E727743
} BMDSwitcherKeyChromaParametersEventType;

/* Enum BMDSwitcherKeyAdvancedChromaParametersEventType - Used in IBMDSwitcherKeyAdvancedChromaParametersCallback */

typedef [v1_enum] enum _BMDSwitcherKeyAdvancedChromaParametersEventType {
    bmdSwitcherKeyAdvancedChromaParametersEventTypeForegroundLevelChanged = /* 'cflC' */ 0x63666C43,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeBackgroundLevelChanged = /* 'cblC' */ 0x63626C43,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeKeyEdgeChanged = /* 'ckeC' */ 0x636B6543,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeSpillSuppressChanged = /* 'cssC' */ 0x63737343,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeFlareSuppressChanged = /* 'cfsC' */ 0x63667343,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeBrightnessChanged = /* 'cfiC' */ 0x63666943,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeContrastChanged = /* 'cfcC' */ 0x63666343,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeSaturationChanged = /* 'cfaC' */ 0x63666143,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeRedChanged    = /* 'cfrC' */ 0x63667243,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeGreenChanged  = /* 'cfgC' */ 0x63666743,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeBlueChanged   = /* 'cfbC' */ 0x63666243,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeSamplingModeEnabledChanged = /* 'ccoC' */ 0x63636F43,
    bmdSwitcherKeyAdvancedChromaParametersEventTypePreviewEnabledChanged = /* 'cpoC' */ 0x63706F43,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeCursorXPositionChanged = /* 'cpxC' */ 0x63707843,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeCursorYPositionChanged = /* 'cpyC' */ 0x63707943,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeCursorSizeChanged = /* 'ccsC' */ 0x63637343,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeSampledColorChanged = /* 'cscC' */ 0x63736343
} BMDSwitcherKeyAdvancedChromaParametersEventType;

/* Enum BMDSwitcherKeyPatternParametersEventType - Used in IBMDSwitcherKeyPatternParametersCallback */

typedef [v1_enum] enum _BMDSwitcherKeyPatternParametersEventType {
    bmdSwitcherKeyPatternParametersEventTypePatternChanged       = /* 'patC' */ 0x70617443,
    bmdSwitcherKeyPatternParametersEventTypeSizeChanged          = /* 'szeC' */ 0x737A6543,
    bmdSwitcherKeyPatternParametersEventTypeSymmetryChanged      = /* 'symC' */ 0x73796D43,
    bmdSwitcherKeyPatternParametersEventTypeSoftnessChanged      = /* 'sftC' */ 0x73667443,
    bmdSwitcherKeyPatternParametersEventTypeHorizontalOffsetChanged = /* 'hzoC' */ 0x687A6F43,
    bmdSwitcherKeyPatternParametersEventTypeVerticalOffsetChanged = /* 'vtoC' */ 0x76746F43,
    bmdSwitcherKeyPatternParametersEventTypeInverseChanged       = /* 'invC' */ 0x696E7643
} BMDSwitcherKeyPatternParametersEventType;

/* Enum BMDSwitcherKeyFlyKeyFrameParametersEventType - Used in IBMDSwitcherKeyFlyKeyFrameParametersCallback */

typedef [v1_enum] enum _BMDSwitcherKeyFlyKeyFrameParametersEventType {
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeSizeXChanged     = /* 'fszx' */ 0x66737A78,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeSizeYChanged     = /* 'fszy' */ 0x66737A79,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypePositionXChanged = /* 'fpsx' */ 0x66707378,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypePositionYChanged = /* 'fpsy' */ 0x66707379,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeRotationChanged  = /* 'frot' */ 0x66726F74,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderWidthOutChanged = /* 'fbwo' */ 0x6662776F,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderWidthInChanged = /* 'fbwi' */ 0x66627769,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSoftnessOutChanged = /* 'fbso' */ 0x6662736F,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSoftnessInChanged = /* 'fbsi' */ 0x66627369,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderBevelSoftnessChanged = /* 'fbbs' */ 0x66626273,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderBevelPositionChanged = /* 'fbbp' */ 0x66626270,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderHueChanged = /* 'fbhu' */ 0x66626875,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSaturationChanged = /* 'fbst' */ 0x66627374,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLumaChanged = /* 'fblm' */ 0x66626C6D,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLightSourceDirectionChanged = /* 'fbld' */ 0x66626C64,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLightSourceAltitudeChanged = /* 'fbla' */ 0x66626C61
} BMDSwitcherKeyFlyKeyFrameParametersEventType;

/* Enum BMDSwitcherKeyFlyParametersEventType - Used in IBMDSwitcherKeyFlyParametersCallback */

typedef [v1_enum] enum _BMDSwitcherKeyFlyParametersEventType {
    bmdSwitcherKeyFlyParametersEventTypeFlyChanged               = /* 'flyC' */ 0x666C7943,
    bmdSwitcherKeyFlyParametersEventTypeCanFlyChanged            = /* 'cflC' */ 0x63666C43,
    bmdSwitcherKeyFlyParametersEventTypeRateChanged              = /* 'rteC' */ 0x72746543,
    bmdSwitcherKeyFlyParametersEventTypeSizeXChanged             = /* 'szxC' */ 0x737A7843,
    bmdSwitcherKeyFlyParametersEventTypeSizeYChanged             = /* 'szyC' */ 0x737A7943,
    bmdSwitcherKeyFlyParametersEventTypePositionXChanged         = /* 'psxC' */ 0x70737843,
    bmdSwitcherKeyFlyParametersEventTypePositionYChanged         = /* 'psyC' */ 0x70737943,
    bmdSwitcherKeyFlyParametersEventTypeRotationChanged          = /* 'rotC' */ 0x726F7443,
    bmdSwitcherKeyFlyParametersEventTypeIsKeyFrameStoredChanged  = /* 'kfsC' */ 0x6B667343,
    bmdSwitcherKeyFlyParametersEventTypeIsAtKeyFramesChanged     = /* 'akfC' */ 0x616B6643,
    bmdSwitcherKeyFlyParametersEventTypeIsRunningChanged         = /* 'rngC' */ 0x726E6743
} BMDSwitcherKeyFlyParametersEventType;

/* Enum BMDSwitcherKeyDVEParametersEventType - Used in IBMDSwitcherKeyDVEParametersCallback */

typedef [v1_enum] enum _BMDSwitcherKeyDVEParametersEventType {
    bmdSwitcherKeyDVEParametersEventTypeShadowChanged            = /* 'shdC' */ 0x73686443,
    bmdSwitcherKeyDVEParametersEventTypeLightSourceDirectionChanged = /* 'ltdC' */ 0x6C746443,
    bmdSwitcherKeyDVEParametersEventTypeLightSourceAltitudeChanged = /* 'ltaC' */ 0x6C746143,
    bmdSwitcherKeyDVEParametersEventTypeBorderEnabledChanged     = /* 'benC' */ 0x62656E43,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelChanged       = /* 'bbvC' */ 0x62627643,
    bmdSwitcherKeyDVEParametersEventTypeBorderWidthInChanged     = /* 'bwiC' */ 0x62776943,
    bmdSwitcherKeyDVEParametersEventTypeBorderWidthOutChanged    = /* 'bwoC' */ 0x62776F43,
    bmdSwitcherKeyDVEParametersEventTypeBorderSoftnessInChanged  = /* 'bsiC' */ 0x62736943,
    bmdSwitcherKeyDVEParametersEventTypeBorderSoftnessOutChanged = /* 'bsoC' */ 0x62736F43,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelSoftnessChanged = /* 'bbsC' */ 0x62627343,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelPositionChanged = /* 'bbpC' */ 0x62627043,
    bmdSwitcherKeyDVEParametersEventTypeBorderOpacityChanged     = /* 'bopC' */ 0x626F7043,
    bmdSwitcherKeyDVEParametersEventTypeBorderHueChanged         = /* 'bhuC' */ 0x62687543,
    bmdSwitcherKeyDVEParametersEventTypeBorderSaturationChanged  = /* 'bstC' */ 0x62737443,
    bmdSwitcherKeyDVEParametersEventTypeBorderLumaChanged        = /* 'blmC' */ 0x626C6D43,
    bmdSwitcherKeyDVEParametersEventTypeMaskedChanged            = /* 'mskC' */ 0x6D736B43,
    bmdSwitcherKeyDVEParametersEventTypeMaskTopChanged           = /* 'mtpC' */ 0x6D747043,
    bmdSwitcherKeyDVEParametersEventTypeMaskBottomChanged        = /* 'mbtC' */ 0x6D627443,
    bmdSwitcherKeyDVEParametersEventTypeMaskLeftChanged          = /* 'mlfC' */ 0x6D6C6643,
    bmdSwitcherKeyDVEParametersEventTypeMaskRightChanged         = /* 'mrtC' */ 0x6D727443
} BMDSwitcherKeyDVEParametersEventType;

/* Enum BMDSwitcherKeyEventType - Used in IBMDSwitcherKeyCallback */

typedef [v1_enum] enum _BMDSwitcherKeyEventType {
    bmdSwitcherKeyEventTypeTypeChanged                           = /* 'typC' */ 0x74797043,
    bmdSwitcherKeyEventTypeInputCutChanged                       = /* 'ipcC' */ 0x69706343,
    bmdSwitcherKeyEventTypeInputFillChanged                      = /* 'ipfC' */ 0x69706643,
    bmdSwitcherKeyEventTypeOnAirChanged                          = /* 'onaC' */ 0x6F6E6143,
    bmdSwitcherKeyEventTypeCanBeDVEKeyChanged                    = /* 'cbdC' */ 0x63626443,
    bmdSwitcherKeyEventTypeMaskedChanged                         = /* 'mkeC' */ 0x6D6B6543,
    bmdSwitcherKeyEventTypeMaskTopChanged                        = /* 'mktC' */ 0x6D6B7443,
    bmdSwitcherKeyEventTypeMaskBottomChanged                     = /* 'mkbC' */ 0x6D6B6243,
    bmdSwitcherKeyEventTypeMaskLeftChanged                       = /* 'mklC' */ 0x6D6B6C43,
    bmdSwitcherKeyEventTypeMaskRightChanged                      = /* 'mkrC' */ 0x6D6B7243
} BMDSwitcherKeyEventType;

/* Enum BMDSwitcherKeyType - (Upstream) Key types */

typedef [v1_enum] enum _BMDSwitcherKeyType {
    bmdSwitcherKeyTypeLuma                                       = /* 'luma' */ 0x6C756D61,
    bmdSwitcherKeyTypeChroma                                     = /* 'chrm' */ 0x6368726D,
    bmdSwitcherKeyTypePattern                                    = /* 'ptrn' */ 0x7074726E,
    bmdSwitcherKeyTypeDVE                                        = /* 'dvee' */ 0x64766565
} BMDSwitcherKeyType;

/* Enum BMDSwitcherPatternStyle - Pattern style for Wipe Transition, or Pattern Keys */

typedef [v1_enum] enum _BMDSwitcherPatternStyle {
    bmdSwitcherPatternStyleLeftToRightBar                        = /* 'ltrb' */ 0x6C747262,
    bmdSwitcherPatternStyleTopToBottomBar                        = /* 'ttbb' */ 0x74746262,
    bmdSwitcherPatternStyleHorizontalBarnDoor                    = /* 'hbnd' */ 0x68626E64,
    bmdSwitcherPatternStyleVerticalBarnDoor                      = /* 'vbnd' */ 0x76626E64,
    bmdSwitcherPatternStyleCornersInFourBox                      = /* 'cifb' */ 0x63696662,
    bmdSwitcherPatternStyleRectangleIris                         = /* 'reci' */ 0x72656369,
    bmdSwitcherPatternStyleDiamondIris                           = /* 'diai' */ 0x64696169,
    bmdSwitcherPatternStyleCircleIris                            = /* 'ciri' */ 0x63697269,
    bmdSwitcherPatternStyleTopLeftBox                            = /* 'tlbx' */ 0x746C6278,
    bmdSwitcherPatternStyleTopRightBox                           = /* 'trbx' */ 0x74726278,
    bmdSwitcherPatternStyleBottomRightBox                        = /* 'brbx' */ 0x62726278,
    bmdSwitcherPatternStyleBottomLeftBox                         = /* 'blbx' */ 0x626C6278,
    bmdSwitcherPatternStyleTopCentreBox                          = /* 'tcbx' */ 0x74636278,
    bmdSwitcherPatternStyleRightCentreBox                        = /* 'rcbx' */ 0x72636278,
    bmdSwitcherPatternStyleBottomCentreBox                       = /* 'bcbx' */ 0x62636278,
    bmdSwitcherPatternStyleLeftCentreBox                         = /* 'lcbx' */ 0x6C636278,
    bmdSwitcherPatternStyleTopLeftDiagonal                       = /* 'tldg' */ 0x746C6467,
    bmdSwitcherPatternStyleTopRightDiagonal                      = /* 'trdg' */ 0x74726467
} BMDSwitcherPatternStyle;

/* Enum BMDSwitcherVideoMode - Video mode of Switcher */

typedef [v1_enum] enum _BMDSwitcherVideoMode {
    bmdSwitcherVideoMode525i5994NTSC                             = /* 'ntsc' */ 0x6E747363,
    bmdSwitcherVideoMode625i50PAL                                = /* 'pall' */ 0x70616C6C,
    bmdSwitcherVideoMode525i5994Anamorphic                       = /* 'ntsA' */ 0x6E747341,
    bmdSwitcherVideoMode625i50Anamorphic                         = /* 'palA' */ 0x70616C41,
    bmdSwitcherVideoMode720p50                                   = /* '72p0' */ 0x37327030,
    bmdSwitcherVideoMode720p5994                                 = /* '72p9' */ 0x37327039,
    bmdSwitcherVideoMode1080i50                                  = /* '10i0' */ 0x31306930,
    bmdSwitcherVideoMode1080i5994                                = /* '10i9' */ 0x31306939,
    bmdSwitcherVideoMode1080p2398                                = /* '10p3' */ 0x31307033,
    bmdSwitcherVideoMode1080p24                                  = /* '10p4' */ 0x31307034,
    bmdSwitcherVideoMode1080p25                                  = /* '10p5' */ 0x31307035,
    bmdSwitcherVideoMode1080p2997                                = /* '10p7' */ 0x31307037,
    bmdSwitcherVideoMode1080p30                                  = /* '10pt' */ 0x31307074,
    bmdSwitcherVideoMode1080p50                                  = /* '10p0' */ 0x31307030,
    bmdSwitcherVideoMode1080p5994                                = /* '10p9' */ 0x31307039,
    bmdSwitcherVideoMode1080p60                                  = /* '10ps' */ 0x31307073,
    bmdSwitcherVideoMode4KHDp2398                                = /* '4H23' */ 0x34483233,
    bmdSwitcherVideoMode4KHDp24                                  = /* '4H24' */ 0x34483234,
    bmdSwitcherVideoMode4KHDp25                                  = /* '4H25' */ 0x34483235,
    bmdSwitcherVideoMode4KHDp2997                                = /* '4H29' */ 0x34483239,
    bmdSwitcherVideoMode4KHDp50                                  = /* '4H50' */ 0x34483530,
    bmdSwitcherVideoMode4KHDp5994                                = /* '4H59' */ 0x34483539,
    bmdSwitcherVideoMode8KHDp2398                                = /* '8H23' */ 0x38483233,
    bmdSwitcherVideoMode8KHDp24                                  = /* '8H24' */ 0x38483234,
    bmdSwitcherVideoMode8KHDp25                                  = /* '8H25' */ 0x38483235,
    bmdSwitcherVideoMode8KHDp2997                                = /* '8H29' */ 0x38483239,
    bmdSwitcherVideoMode8KHDp50                                  = /* '8H50' */ 0x38483530,
    bmdSwitcherVideoMode8KHDp5994                                = /* '8H59' */ 0x38483539
} BMDSwitcherVideoMode;

/* Enum BMDSwitcherDownConversionMethod - Down convert method used when converting 16:9 to 4:3 */

typedef [v1_enum] enum _BMDSwitcherDownConversionMethod {
    bmdSwitcherDownConversionMethodCentreCut                     = /* 'dmcc' */ 0x646D6363,
    bmdSwitcherDownConversionMethodLetterbox                     = /* 'dmlb' */ 0x646D6C62,
    bmdSwitcherDownConversionMethodAnamorphic                    = /* 'dmam' */ 0x646D616D
} BMDSwitcherDownConversionMethod;

/* Enum BMDSwitcher3GSDIOutputLevel - Switcher 3G-SDI level mode for all outputs */

typedef [v1_enum] enum _BMDSwitcher3GSDIOutputLevel {
    bmdSwitcher3GSDIOutputLevelA                                 = /* '3gsa' */ 0x33677361,
    bmdSwitcher3GSDIOutputLevelB                                 = /* '3gsb' */ 0x33677362
} BMDSwitcher3GSDIOutputLevel;

/* Enum BMDSwitcherPowerStatus - IBMDSwitcher Power Status bits */

typedef [v1_enum] enum _BMDSwitcherPowerStatus {
    bmdSwitcherPowerStatusSupply1                                = 0x01,
    bmdSwitcherPowerStatusSupply2                                = 0x02
} BMDSwitcherPowerStatus;

/* Enum BMDSwitcherPixelFormat - Pixel Format used in IBMDSwitcherFrame */

typedef [v1_enum] enum _BMDSwitcherPixelFormat {
    bmdSwitcherPixelFormat8BitARGB                               = /* 'argb' */ 0x61726762,
    bmdSwitcherPixelFormat8BitXRGB                               = /* 'xrgb' */ 0x78726762,
    bmdSwitcherPixelFormat8BitYUV                                = /* '2vuy' */ 0x32767579,
    bmdSwitcherPixelFormat10BitYUVA                              = /* 'yuva' */ 0x79757661
} BMDSwitcherPixelFormat;

/* Enum BMDSwitcherFlyKeyFrame - Used in IBMDSwitcherKeyFlyParameters */

typedef [v1_enum] enum _BMDSwitcherFlyKeyFrame {
    bmdSwitcherFlyKeyFrameFull                                   = 0x00000001,
    bmdSwitcherFlyKeyFrameInfinityCentreOfKey                    = 0x00000002,
    bmdSwitcherFlyKeyFrameInfinityTopLeft                        = 0x00000004,
    bmdSwitcherFlyKeyFrameInfinityTop                            = 0x00000008,
    bmdSwitcherFlyKeyFrameInfinityTopRight                       = 0x00000010,
    bmdSwitcherFlyKeyFrameInfinityLeft                           = 0x00000020,
    bmdSwitcherFlyKeyFrameInfinityCentre                         = 0x00000040,
    bmdSwitcherFlyKeyFrameInfinityRight                          = 0x00000080,
    bmdSwitcherFlyKeyFrameInfinityBottomLeft                     = 0x00000100,
    bmdSwitcherFlyKeyFrameInfinityBottom                         = 0x00000200,
    bmdSwitcherFlyKeyFrameInfinityBottomRight                    = 0x00000400,
    bmdSwitcherFlyKeyFrameA                                      = 0x00000800,
    bmdSwitcherFlyKeyFrameB                                      = 0x00001000
} BMDSwitcherFlyKeyFrame;

/* Enum BMDSwitcherDVETransitionStyle - Transition style for DVE Transition */

typedef [v1_enum] enum _BMDSwitcherDVETransitionStyle {
    bmdSwitcherDVETransitionStyleSwooshTopLeft                   = /* 'swtl' */ 0x7377746C,
    bmdSwitcherDVETransitionStyleSwooshTop                       = /* 'swtc' */ 0x73777463,
    bmdSwitcherDVETransitionStyleSwooshTopRight                  = /* 'swtr' */ 0x73777472,
    bmdSwitcherDVETransitionStyleSwooshLeft                      = /* 'swlc' */ 0x73776C63,
    bmdSwitcherDVETransitionStyleSwooshRight                     = /* 'swrc' */ 0x73777263,
    bmdSwitcherDVETransitionStyleSwooshBottomLeft                = /* 'swbl' */ 0x7377626C,
    bmdSwitcherDVETransitionStyleSwooshBottom                    = /* 'swbc' */ 0x73776263,
    bmdSwitcherDVETransitionStyleSwooshBottomRight               = /* 'swbr' */ 0x73776272,
    bmdSwitcherDVETransitionStyleSpinCWTopLeft                   = /* 'sptl' */ 0x7370746C,
    bmdSwitcherDVETransitionStyleSpinCWTopRight                  = /* 'sptr' */ 0x73707472,
    bmdSwitcherDVETransitionStyleSpinCWBottomLeft                = /* 'spbl' */ 0x7370626C,
    bmdSwitcherDVETransitionStyleSpinCWBottomRight               = /* 'spbr' */ 0x73706272,
    bmdSwitcherDVETransitionStyleSpinCCWTopLeft                  = /* 'sctl' */ 0x7363746C,
    bmdSwitcherDVETransitionStyleSpinCCWTopRight                 = /* 'sctr' */ 0x73637472,
    bmdSwitcherDVETransitionStyleSpinCCWBottomLeft               = /* 'scbl' */ 0x7363626C,
    bmdSwitcherDVETransitionStyleSpinCCWBottomRight              = /* 'scbr' */ 0x73636272,
    bmdSwitcherDVETransitionStyleSqueezeTopLeft                  = /* 'sqtl' */ 0x7371746C,
    bmdSwitcherDVETransitionStyleSqueezeTop                      = /* 'sqtc' */ 0x73717463,
    bmdSwitcherDVETransitionStyleSqueezeTopRight                 = /* 'sqtr' */ 0x73717472,
    bmdSwitcherDVETransitionStyleSqueezeLeft                     = /* 'sqlc' */ 0x73716C63,
    bmdSwitcherDVETransitionStyleSqueezeRight                    = /* 'sqrc' */ 0x73717263,
    bmdSwitcherDVETransitionStyleSqueezeBottomLeft               = /* 'sqbl' */ 0x7371626C,
    bmdSwitcherDVETransitionStyleSqueezeBottom                   = /* 'sqbc' */ 0x73716263,
    bmdSwitcherDVETransitionStyleSqueezeBottomRight              = /* 'sqbr' */ 0x73716272,
    bmdSwitcherDVETransitionStylePushTopLeft                     = /* 'sutl' */ 0x7375746C,
    bmdSwitcherDVETransitionStylePushTop                         = /* 'sutc' */ 0x73757463,
    bmdSwitcherDVETransitionStylePushTopRight                    = /* 'sutr' */ 0x73757472,
    bmdSwitcherDVETransitionStylePushLeft                        = /* 'sulc' */ 0x73756C63,
    bmdSwitcherDVETransitionStylePushRight                       = /* 'surc' */ 0x73757263,
    bmdSwitcherDVETransitionStylePushBottomLeft                  = /* 'subl' */ 0x7375626C,
    bmdSwitcherDVETransitionStylePushBottom                      = /* 'subc' */ 0x73756263,
    bmdSwitcherDVETransitionStylePushBottomRight                 = /* 'subr' */ 0x73756272,
    bmdSwitcherDVETransitionStyleGraphicCWSpin                   = /* 'sgcw' */ 0x73676377,
    bmdSwitcherDVETransitionStyleGraphicCCWSpin                  = /* 'sgcc' */ 0x73676363,
    bmdSwitcherDVETransitionStyleGraphicLogoWipe                 = /* 'sglw' */ 0x73676C77
} BMDSwitcherDVETransitionStyle;

/* Enum BMDSwitcherStingerTransitionSource - Transition source used in Stinger Transitions */

typedef [v1_enum] enum _BMDSwitcherStingerTransitionSource {
    bmdSwitcherStingerTransitionSourceMediaPlayer1               = /* 'smp1' */ 0x736D7031,
    bmdSwitcherStingerTransitionSourceMediaPlayer2               = /* 'smp2' */ 0x736D7032,
    bmdSwitcherStingerTransitionSourceMediaPlayer3               = /* 'smp3' */ 0x736D7033,
    bmdSwitcherStingerTransitionSourceMediaPlayer4               = /* 'smp4' */ 0x736D7034,
    bmdSwitcherStingerTransitionSourceNone                       = /* 'snon' */ 0x736E6F6E
} BMDSwitcherStingerTransitionSource;

/* Enum BMDSwitcherMediaPlayerSourceType - Source for a Media Player */

typedef [v1_enum] enum _BMDSwitcherMediaPlayerSourceType {
    bmdSwitcherMediaPlayerSourceTypeStill                        = /* 'smps' */ 0x736D7073,
    bmdSwitcherMediaPlayerSourceTypeClip                         = /* 'smpc' */ 0x736D7063
} BMDSwitcherMediaPlayerSourceType;

/* Enum BMDSwitcherMultiViewLayout - Layout for MultiView */

typedef [v1_enum] enum _BMDSwitcherMultiViewLayout {
    bmdSwitcherMultiViewLayoutProgramTop                         = 0x0C,
    bmdSwitcherMultiViewLayoutProgramBottom                      = 0x03,
    bmdSwitcherMultiViewLayoutProgramLeft                        = 0x0a,
    bmdSwitcherMultiViewLayoutProgramRight                       = 0x05,
    bmdSwitcherMultiViewLayoutTopLeftSmall                       = 0x01,
    bmdSwitcherMultiViewLayoutTopRightSmall                      = 0x02,
    bmdSwitcherMultiViewLayoutBottomLeftSmall                    = 0x04,
    bmdSwitcherMultiViewLayoutBottomRightSmall                   = 0x08
} BMDSwitcherMultiViewLayout;

/* Enum BMDSwitcherMultiViewEventType - Used in IBMDSwitcherMultiViewCallback */

typedef [v1_enum] enum _BMDSwitcherMultiViewEventType {
    bmdSwitcherMultiViewEventTypeLayoutChanged                   = /* 'lotC' */ 0x6C6F7443,
    bmdSwitcherMultiViewEventTypeWindowChanged                   = /* 'wdwC' */ 0x77647743,
    bmdSwitcherMultiViewEventTypeCurrentInputSupportsVuMeterChanged = /* 'vmsC' */ 0x766D7343,
    bmdSwitcherMultiViewEventTypeVuMeterEnabledChanged           = /* 'vmeC' */ 0x766D6543,
    bmdSwitcherMultiViewEventTypeVuMeterOpacityChanged           = /* 'vmoC' */ 0x766D6F43,
    bmdSwitcherMultiViewEventTypeCurrentInputSupportsSafeAreaChanged = /* 'sasC' */ 0x73617343,
    bmdSwitcherMultiViewEventTypeSafeAreaEnabledChanged          = /* 'saeC' */ 0x73616543,
    bmdSwitcherMultiViewEventTypeProgramPreviewSwappedChanged    = /* 'ppsC' */ 0x70707343
} BMDSwitcherMultiViewEventType;

/* Enum BMDSwitcherDownstreamKeyEventType - Used in IBMDSwitcherDownstreamKeyCallback */

typedef [v1_enum] enum _BMDSwitcherDownstreamKeyEventType {
    bmdSwitcherDownstreamKeyEventTypeInputCutChanged             = /* 'ipcC' */ 0x69706343,
    bmdSwitcherDownstreamKeyEventTypeInputFillChanged            = /* 'ipfC' */ 0x69706643,
    bmdSwitcherDownstreamKeyEventTypeTieChanged                  = /* 'tieC' */ 0x74696543,
    bmdSwitcherDownstreamKeyEventTypeRateChanged                 = /* 'rteC' */ 0x72746543,
    bmdSwitcherDownstreamKeyEventTypeOnAirChanged                = /* 'onaC' */ 0x6F6E6143,
    bmdSwitcherDownstreamKeyEventTypeIsTransitioningChanged      = /* 'itsC' */ 0x69747343,
    bmdSwitcherDownstreamKeyEventTypeIsAutoTransitioningChanged  = /* 'iatC' */ 0x69617443,
    bmdSwitcherDownstreamKeyEventTypeIsTransitionTowardsOnAirChanged = /* 'toaC' */ 0x746F6143,
    bmdSwitcherDownstreamKeyEventTypeFramesRemainingChanged      = /* 'frmC' */ 0x66726D43,
    bmdSwitcherDownstreamKeyEventTypePreMultipliedChanged        = /* 'pmlC' */ 0x706D6C43,
    bmdSwitcherDownstreamKeyEventTypeClipChanged                 = /* 'clpC' */ 0x636C7043,
    bmdSwitcherDownstreamKeyEventTypeGainChanged                 = /* 'gneC' */ 0x676E6543,
    bmdSwitcherDownstreamKeyEventTypeInverseChanged              = /* 'invC' */ 0x696E7643,
    bmdSwitcherDownstreamKeyEventTypeMaskedChanged               = /* 'mskC' */ 0x6D736B43,
    bmdSwitcherDownstreamKeyEventTypeMaskTopChanged              = /* 'mktC' */ 0x6D6B7443,
    bmdSwitcherDownstreamKeyEventTypeMaskBottomChanged           = /* 'mkbC' */ 0x6D6B6243,
    bmdSwitcherDownstreamKeyEventTypeMaskLeftChanged             = /* 'mklC' */ 0x6D6B6C43,
    bmdSwitcherDownstreamKeyEventTypeMaskRightChanged            = /* 'mkrC' */ 0x6D6B7243
} BMDSwitcherDownstreamKeyEventType;

/* Enum BMDSwitcherConnectToFailure - used in ConnectTo */

typedef [v1_enum] enum _BMDSwitcherConnectToFailure {
    bmdSwitcherConnectToFailureNoResponse                        = /* 'cfnr' */ 0x63666E72,
    bmdSwitcherConnectToFailureIncompatibleFirmware              = /* 'cfif' */ 0x63666966,
    bmdSwitcherConnectToFailureCorruptData                       = /* 'cfcd' */ 0x63666364,
    bmdSwitcherConnectToFailureStateSync                         = /* 'cfss' */ 0x63667373,
    bmdSwitcherConnectToFailureStateSyncTimedOut                 = /* 'cfst' */ 0x63667374,
    bmdSwitcherConnectToFailureDeprecatedAfter_v7_3              = /* 'cfd0' */ 0x63666430
} BMDSwitcherConnectToFailure;

/* Enum BMDSwitcherSaveRecallType - BMDSwitcher Save Recall Type */

typedef [v1_enum] enum _BMDSwitcherSaveRecallType {
    bmdSwitcherSaveRecallTypeStartupState                        = /* 'srss' */ 0x73727373
} BMDSwitcherSaveRecallType;

/* Enum BMDSwitcherMediaPoolEventType - Used in IBMDSwitcherClipCallback, IBMDSwitcherStillsCallback */

typedef [v1_enum] enum _BMDSwitcherMediaPoolEventType {
    bmdSwitcherMediaPoolEventTypeValidChanged                    = /* 'vlid' */ 0x766C6964,
    bmdSwitcherMediaPoolEventTypeNameChanged                     = /* 'name' */ 0x6E616D65,
    bmdSwitcherMediaPoolEventTypeHashChanged                     = /* 'hash' */ 0x68617368,
    bmdSwitcherMediaPoolEventTypeAudioValidChanged               = /* 'avld' */ 0x61766C64,
    bmdSwitcherMediaPoolEventTypeAudioNameChanged                = /* 'anme' */ 0x616E6D65,
    bmdSwitcherMediaPoolEventTypeAudioHashChanged                = /* 'ahsh' */ 0x61687368,
    bmdSwitcherMediaPoolEventTypeLockBusy                        = /* 'lbsy' */ 0x6C627379,
    bmdSwitcherMediaPoolEventTypeLockIdle                        = /* 'lidl' */ 0x6C69646C,
    bmdSwitcherMediaPoolEventTypeTransferCompleted               = /* 'cmpt' */ 0x636D7074,
    bmdSwitcherMediaPoolEventTypeTransferCancelled               = /* 'cncl' */ 0x636E636C,
    bmdSwitcherMediaPoolEventTypeTransferFailed                  = /* 'fail' */ 0x6661696C
} BMDSwitcherMediaPoolEventType;

/* Enum BMDSwitcherStillCaptureEventType - Used in IBMDSwitcherStillCaptureCallback */

typedef [v1_enum] enum _BMDSwitcherStillCaptureEventType {
    bmdSwitcherStillCaptureEventTypeIsAvailableChanged           = /* 'scac' */ 0x73636163
} BMDSwitcherStillCaptureEventType;

/* Enum BMDSwitcherRecordDiskStatus - Used in IBMDSwitcherRecordDisk */

typedef [v1_enum] enum _BMDSwitcherRecordDiskStatus {
    bmdSwitcherRecordDiskIdle                                    = /* 'rdid' */ 0x72646964,
    bmdSwitcherRecordDiskUnformatted                             = /* 'rduf' */ 0x72647566,
    bmdSwitcherRecordDiskActive                                  = /* 'rdav' */ 0x72646176,
    bmdSwitcherRecordDiskRecording                               = /* 'rdrc' */ 0x72647263
} BMDSwitcherRecordDiskStatus;

/* Enum BMDSwitcherRecordDiskEventType - Used in IBMDSwitcherRecordDiskCallback */

typedef [v1_enum] enum _BMDSwitcherRecordDiskEventType {
    bmdSwitcherRecordDiskEventTypeStatusChanged                  = /* 'rdsc' */ 0x72647363,
    bmdSwitcherRecordDiskEventTypeRecordingTimeAvailableChanged  = /* 'rdtc' */ 0x72647463,
    bmdSwitcherRecordDiskEventTypeVolumeNameChanged              = /* 'rdvc' */ 0x72647663
} BMDSwitcherRecordDiskEventType;

/* Enum BMDSwitcherRecordAVEventType - Used in IBMDSwitcherRecordAVCallback */

typedef [v1_enum] enum _BMDSwitcherRecordAVEventType {
    bmdSwitcherRecordAVEventTypeFilenameChanged                  = /* 'rmfc' */ 0x726D6663,
    bmdSwitcherRecordAVEventTypeRecordInAllCamerasChanged        = /* 'racc' */ 0x72616363,
    bmdSwitcherRecordAVEventTypeDurationChanged                  = /* 'rmdc' */ 0x726D6463,
    bmdSwitcherRecordAVEventTypeActiveDiskIndexChanged           = /* 'rmac' */ 0x726D6163,
    bmdSwitcherRecordAVEventTypeTotalRecordingTimeAvailableChanged = /* 'rmtc' */ 0x726D7463,
    bmdSwitcherRecordAVEventTypeRecordAllISOInputsChanged        = /* 'isra' */ 0x69737261
} BMDSwitcherRecordAVEventType;

/* Enum BMDSwitcherRecordDiskAvailabilityEventType - Used in IBMDSwitcherRecordAVCallback */

typedef [v1_enum] enum _BMDSwitcherRecordDiskAvailabilityEventType {
    bmdSwitcherRecordDiskAvailabilityEventTypeAvailable          = /* 'rdaa' */ 0x72646161,
    bmdSwitcherRecordDiskAvailabilityEventTypeRemoved            = /* 'rdar' */ 0x72646172
} BMDSwitcherRecordDiskAvailabilityEventType;

/* Enum BMDSwitcherRecordAVState - Used in IBMDSwitcherRecordAV */

typedef [v1_enum] enum _BMDSwitcherRecordAVState {
    bmdSwitcherRecordAVStateIdle                                 = /* 'rasi' */ 0x72617369,
    bmdSwitcherRecordAVStateRecording                            = /* 'rasr' */ 0x72617372,
    bmdSwitcherRecordAVStateStopping                             = /* 'rass' */ 0x72617373
} BMDSwitcherRecordAVState;

/* Enum BMDSwitcherRecordAVError - Used in IBMDSwitcherRecordAV */

typedef [v1_enum] enum _BMDSwitcherRecordAVError {
    bmdSwitcherRecordAVErrorNone                                 = /* 'renn' */ 0x72656E6E,
    bmdSwitcherRecordAVErrorNoMedia                              = /* 'renm' */ 0x72656E6D,
    bmdSwitcherRecordAVErrorMediaFull                            = /* 'remf' */ 0x72656D66,
    bmdSwitcherRecordAVErrorMediaError                           = /* 'reme' */ 0x72656D65,
    bmdSwitcherRecordAVErrorMediaUnformatted                     = /* 'remu' */ 0x72656D75,
    bmdSwitcherRecordAVErrorDroppingFrames                       = /* 'redf' */ 0x72656466,
    bmdSwitcherRecordAVErrorUnknown                              = /* 'reuk' */ 0x7265756B
} BMDSwitcherRecordAVError;

/* Enum BMDSwitcherStreamRTMPEventType - Used in IBMDSwitcherStreamRTMPCallback */

typedef [v1_enum] enum _BMDSwitcherStreamRTMPEventType {
    bmdSwitcherStreamRTMPEventTypeServiceNameChanged             = /* 'rsnh' */ 0x72736E68,
    bmdSwitcherStreamRTMPEventTypeUrlChanged                     = /* 'rsuc' */ 0x72737563,
    bmdSwitcherStreamRTMPEventTypeKeyChanged                     = /* 'rskc' */ 0x72736B63,
    bmdSwitcherStreamRTMPEventTypeVideoBitratesChanged           = /* 'rsbc' */ 0x72736263,
    bmdSwitcherStreamRTMPEventTypeAudioBitratesChanged           = /* 'rabc' */ 0x72616263,
    bmdSwitcherStreamRTMPEventTypeEncodingBitrateChanged         = /* 'rsec' */ 0x72736563,
    bmdSwitcherStreamRTMPEventTypeCacheUsedChanged               = /* 'rscc' */ 0x72736363,
    bmdSwitcherStreamRTMPEventTypeDurationChanged                = /* 'rsdc' */ 0x72736463,
    bmdSwitcherStreamRTMPEventTypeAuthenticationChanged          = /* 'rsac' */ 0x72736163,
    bmdSwitcherStreamRTMPEventTypeLowLatencyChanged              = /* 'lltc' */ 0x6C6C7463
} BMDSwitcherStreamRTMPEventType;

/* Enum BMDSwitcherStreamRTMPState - Used in IBMDSwitcherStreamRTMP */

typedef [v1_enum] enum _BMDSwitcherStreamRTMPState {
    bmdSwitcherStreamRTMPStateIdle                               = /* 'rtsi' */ 0x72747369,
    bmdSwitcherStreamRTMPStateConnecting                         = /* 'rtsc' */ 0x72747363,
    bmdSwitcherStreamRTMPStateStreaming                          = /* 'rtss' */ 0x72747373,
    bmdSwitcherStreamRTMPStateStopping                           = /* 'rtst' */ 0x72747374
} BMDSwitcherStreamRTMPState;

/* Enum BMDSwitcherStreamRTMPError - Used in IBMDSwitcherStreamRTMP */

typedef [v1_enum] enum _BMDSwitcherStreamRTMPError {
    bmdSwitcherStreamRTMPErrorNone                               = /* 'rten' */ 0x7274656E,
    bmdSwitcherStreamRTMPErrorInvalidState                       = /* 'rtei' */ 0x72746569,
    bmdSwitcherStreamRTMPErrorUnknown                            = /* 'rteu' */ 0x72746575
} BMDSwitcherStreamRTMPError;

/* Enum BMDSwitcherCameraControlEventType - Used in IBMDSwitcherCameraControlCallback */

typedef [v1_enum] enum _BMDSwitcherCameraControlEventType {
    bmdSwitcherCameraControlEventTypePeriodicFlushIntervalChanged = /* 'pfic' */ 0x70666963,
    bmdSwitcherCameraControlEventTypeParameterValueChanged       = /* 'pmvc' */ 0x706D7663,
    bmdSwitcherCameraControlEventTypeParameterPeriodicFlushEnabledChanged = /* 'pmpc' */ 0x706D7063
} BMDSwitcherCameraControlEventType;

/* Enum BMDSwitcherCameraControlParameterType - Used in IBMDSwitcherCameraControl */

typedef [v1_enum] enum _BMDSwitcherCameraControlParameterType {
    bmdSwitcherCameraControlParameterTypeVoidBool                = /* 'ccvb' */ 0x63637662,
    bmdSwitcherCameraControlParameterTypeSigned8Bit              = /* 'ccs8' */ 0x63637338,
    bmdSwitcherCameraControlParameterTypeSigned16Bit             = /* 'ccs1' */ 0x63637331,
    bmdSwitcherCameraControlParameterTypeSigned32Bit             = /* 'ccs3' */ 0x63637333,
    bmdSwitcherCameraControlParameterTypeSigned64Bit             = /* 'ccs6' */ 0x63637336,
    bmdSwitcherCameraControlParameterTypeUTF8                    = /* 'ccu8' */ 0x63637538,
    bmdSwitcherCameraControlParameterTypeFixedPoint16Bit         = /* 'ccfp' */ 0x63636670
} BMDSwitcherCameraControlParameterType;

/* Enum BMDSwitcherMacroPoolEventType - Used in IBMDSwitcherMacroPoolCallback */

typedef [v1_enum] enum _BMDSwitcherMacroPoolEventType {
    bmdSwitcherMacroPoolEventTypeValidChanged                    = /* 'mava' */ 0x6D617661,
    bmdSwitcherMacroPoolEventTypeHasUnsupportedOpsChanged        = /* 'maop' */ 0x6D616F70,
    bmdSwitcherMacroPoolEventTypeNameChanged                     = /* 'mana' */ 0x6D616E61,
    bmdSwitcherMacroPoolEventTypeDescriptionChanged              = /* 'made' */ 0x6D616465,
    bmdSwitcherMacroPoolEventTypeTransferCompleted               = /* 'mats' */ 0x6D617473,
    bmdSwitcherMacroPoolEventTypeTransferCancelled               = /* 'matc' */ 0x6D617463,
    bmdSwitcherMacroPoolEventTypeTransferFailed                  = /* 'matf' */ 0x6D617466
} BMDSwitcherMacroPoolEventType;

/* Enum BMDSwitcherMacroControlEventType - Used in IBMDSwitcherMacroControlCallback */

typedef [v1_enum] enum _BMDSwitcherMacroControlEventType {
    bmdSwitcherMacroControlEventTypeRunStatusChanged             = /* 'marn' */ 0x6D61726E,
    bmdSwitcherMacroControlEventTypeRecordStatusChanged          = /* 'marc' */ 0x6D617263
} BMDSwitcherMacroControlEventType;

/* Enum BMDSwitcherMacroRunStatus - Used in IBMDSwitcherMacroControl */

typedef [v1_enum] enum _BMDSwitcherMacroRunStatus {
    bmdSwitcherMacroRunStatusIdle                                = 0x00,
    bmdSwitcherMacroRunStatusRunning                             = 0x01,
    bmdSwitcherMacroRunStatusWaitingForUser                      = 0x02
} BMDSwitcherMacroRunStatus;

/* Enum BMDSwitcherMacroRecordStatus - Used in IBMDSwitcherMacroControl */

typedef [v1_enum] enum _BMDSwitcherMacroRecordStatus {
    bmdSwitcherMacroRecordStatusIdle                             = 0x00,
    bmdSwitcherMacroRecordStatusRecording                        = 0x01
} BMDSwitcherMacroRecordStatus;

/* Enum BMDSwitcherSerialPortFunction - Used in IBMDSwitcherSerialPort */

typedef [v1_enum] enum _BMDSwitcherSerialPortFunction {
    bmdSwitcherSerialPortFunctionNone                            = /* 'spfn' */ 0x7370666E,
    bmdSwitcherSerialPortFunctionPtzVisca                        = /* 'spfp' */ 0x73706670,
    bmdSwitcherSerialPortFunctionGvg100                          = /* 'spfg' */ 0x73706667
} BMDSwitcherSerialPortFunction;

/* Enum BMDSwitcherSerialPortEventType - Used in IBMDSwitcherSerialPortCallback */

typedef [v1_enum] enum _BMDSwitcherSerialPortEventType {
    bmdSwitcherSerialPortEventTypeFunctionChanged                = /* 'spfc' */ 0x73706663
} BMDSwitcherSerialPortEventType;

/* Enum BMDSwitcherHyperDeckClipEventType - Used in IBMDSwitcherHyperDeckClipCallback */

typedef [v1_enum] enum _BMDSwitcherHyperDeckClipEventType {
    bmdSwitcherHyperDeckClipEventTypeValidChanged                = /* 'ecnC' */ 0x65636E43,
    bmdSwitcherHyperDeckClipEventTypeInfoAvailableChanged        = /* 'eciC' */ 0x65636943
} BMDSwitcherHyperDeckClipEventType;

/* Enum BMDSwitcherHyperDeckPlayerState - Device State of an HyperDeck */

typedef [v1_enum] enum _BMDSwitcherHyperDeckPlayerState {
    bmdSwitcherHyperDeckStateUnknown                             = /* 'epsu' */ 0x65707375,
    bmdSwitcherHyperDeckStateIdle                                = /* 'epsi' */ 0x65707369,
    bmdSwitcherHyperDeckStatePlay                                = /* 'epsp' */ 0x65707370,
    bmdSwitcherHyperDeckStateRecord                              = /* 'epsr' */ 0x65707372,
    bmdSwitcherHyperDeckStateShuttle                             = /* 'epsf' */ 0x65707366
} BMDSwitcherHyperDeckPlayerState;

/* Enum BMDSwitcherHyperDeckEventType - Used in IBMDSwitcherHyperDeckCallback */

typedef [v1_enum] enum _BMDSwitcherHyperDeckEventType {
    bmdSwitcherHyperDeckEventTypeConnectionStatusChanged         = /* 'emsC' */ 0x656D7343,
    bmdSwitcherHyperDeckEventTypeRemoteAccessEnabledChanged      = /* 'emaC' */ 0x656D6143,
    bmdSwitcherHyperDeckEventTypeStorageMediaStateChanged        = /* 'emvC' */ 0x656D7643,
    bmdSwitcherHyperDeckEventTypeEstimatedRecordTimeRemainingChanged = /* 'emRC' */ 0x656D5243,
    bmdSwitcherHyperDeckEventTypeActiveStorageMediaChanged       = /* 'emVC' */ 0x656D5643,
    bmdSwitcherHyperDeckEventTypeClipCountChanged                = /* 'emcC' */ 0x656D6343,
    bmdSwitcherHyperDeckEventTypeSwitcherInputChanged            = /* 'emiC' */ 0x656D6943,
    bmdSwitcherHyperDeckEventTypeFrameRateChanged                = /* 'emrC' */ 0x656D7243,
    bmdSwitcherHyperDeckEventTypeInterlacedVideoChanged          = /* 'emtC' */ 0x656D7443,
    bmdSwitcherHyperDeckEventTypeDropFrameTimeCodeChanged        = /* 'emdC' */ 0x656D6443,
    bmdSwitcherHyperDeckEventTypePlayerStateChanged              = /* 'empC' */ 0x656D7043,
    bmdSwitcherHyperDeckEventTypeCurrentClipChanged              = /* 'emuC' */ 0x656D7543,
    bmdSwitcherHyperDeckEventTypeCurrentClipTimeChanged          = /* 'emmC' */ 0x656D6D43,
    bmdSwitcherHyperDeckEventTypeCurrentTimelineTimeChanged      = /* 'emMC' */ 0x656D4D43,
    bmdSwitcherHyperDeckEventTypeShuttleSpeedChanged             = /* 'emhC' */ 0x656D6843,
    bmdSwitcherHyperDeckEventTypeLoopedPlaybackChanged           = /* 'emlC' */ 0x656D6C43,
    bmdSwitcherHyperDeckEventTypeSingleClipPlaybackChanged       = /* 'emgC' */ 0x656D6743,
    bmdSwitcherHyperDeckEventTypeAutoRollOnTakeChanged           = /* 'emAC' */ 0x656D4143,
    bmdSwitcherHyperDeckEventTypeAutoRollOnTakeFrameDelayChanged = /* 'emDC' */ 0x656D4443,
    bmdSwitcherHyperDeckEventTypeNetworkAddressChanged           = /* 'emnC' */ 0x656D6E43
} BMDSwitcherHyperDeckEventType;

/* Enum BMDSwitcherHyperDeckConnectionStatus - HyperDeck Connection State */

typedef [v1_enum] enum _BMDSwitcherHyperDeckConnectionStatus {
    bmdSwitcherHyperDeckConnectionStatusNotConnected             = /* 'esnc' */ 0x65736E63,
    bmdSwitcherHyperDeckConnectionStatusConnecting               = /* 'escg' */ 0x65736367,
    bmdSwitcherHyperDeckConnectionStatusConnected                = /* 'escd' */ 0x65736364,
    bmdSwitcherHyperDeckConnectionStatusIncompatible             = /* 'esic' */ 0x65736963
} BMDSwitcherHyperDeckConnectionStatus;

/* Enum BMDSwitcherHyperDeckStorageMediaState - HyperDeck Storage Media State */

typedef [v1_enum] enum _BMDSwitcherHyperDeckStorageMediaState {
    bmdSwitcherHyperDeckStorageMediaStateReady                   = /* 'esrd' */ 0x65737264,
    bmdSwitcherHyperDeckStorageMediaStateUnavailable             = /* 'esun' */ 0x6573756E
} BMDSwitcherHyperDeckStorageMediaState;

/* Enum BMDSwitcherHyperDeckErrorType - HyperDeck Transient Error */

typedef [v1_enum] enum _BMDSwitcherHyperDeckErrorType {
    bmdSwitcherHyperDeckErrorTypeUnknown                         = /* 'eeuk' */ 0x6565756B,
    bmdSwitcherHyperDeckErrorTypeAlreadyInUse                    = /* 'eeiu' */ 0x65656975,
    bmdSwitcherHyperDeckErrorTypeDuplicateAddress                = /* 'eeda' */ 0x65656461,
    bmdSwitcherHyperDeckErrorTypeRemoteDisabled                  = /* 'eerd' */ 0x65657264,
    bmdSwitcherHyperDeckErrorTypeMediaFull                       = /* 'eemf' */ 0x65656D66,
    bmdSwitcherHyperDeckErrorTypeMediaError                      = /* 'eeme' */ 0x65656D65,
    bmdSwitcherHyperDeckErrorTypeNoInput                         = /* 'eeni' */ 0x65656E69
} BMDSwitcherHyperDeckErrorType;

/* Enum BMDSwitcherMixMinusOutputAudioMode - Mix-Minus Output Audio Mode */

typedef [v1_enum] enum _BMDSwitcherMixMinusOutputAudioMode {
    bmdSwitcherMixMinusOutputAudioModeProgramOut                 = 0x00000001,
    bmdSwitcherMixMinusOutputAudioModeMixMinus                   = 0x00000002
} BMDSwitcherMixMinusOutputAudioMode;

/* Enum BMDSwitcherMixMinusOutputEventType - Used in IBMDSwitcherMixMinusOutputCallback */

typedef [v1_enum] enum _BMDSwitcherMixMinusOutputEventType {
    bmdSwitcherMixMinusOutputEventTypeAvailableAudioModesChanged = /* 'ammC' */ 0x616D6D43,
    bmdSwitcherMixMinusOutputEventTypeAudioModeChanged           = /* 'mmmC' */ 0x6D6D6D43,
    bmdSwitcherMixMinusOutputEventTypeHasMinusAudioInputIdChanged = /* 'hmaC' */ 0x686D6143,
    bmdSwitcherMixMinusOutputEventTypeMinusAudioInputIdChanged   = /* 'maiC' */ 0x6D616943
} BMDSwitcherMixMinusOutputEventType;

/* Enum BMDSwitcherAudioInputXLREventType - Used in IBMDSwitcherAudioInputXLRCallback */

typedef [v1_enum] enum _BMDSwitcherAudioInputXLREventType {
    bmdSwitcherAudioInputXLREventTypeRCAToXLREnabledChanged      = /* 'rtxC' */ 0x72747843
} BMDSwitcherAudioInputXLREventType;

/* Enum BMDSwitcherTimeCodeMode - Used in IBMDSwitcher */

typedef [v1_enum] enum _BMDSwitcherTimeCodeMode {
    bmdSwitcherTimeCodeModeFreeRun                               = /* 'tmfr' */ 0x746D6672,
    bmdSwitcherTimeCodeModeTimeOfDay                             = /* 'tmtd' */ 0x746D7464
} BMDSwitcherTimeCodeMode;

// Forward Declarations

interface IBMDSwitcherAudioMonitorOutputCallback;
interface IBMDSwitcherAudioMonitorOutput;
interface IBMDSwitcherAudioInputCallback;
interface IBMDSwitcherAudioInput;
interface IBMDSwitcherAudioMixerCallback;
interface IBMDSwitcherAudioMixer;
interface IBMDSwitcherTalkbackCallback;
interface IBMDSwitcherTalkback;
interface IBMDSwitcherAudioHeadphoneOutput;
interface IBMDSwitcherAudioHeadphoneOutputCallback;
interface IBMDSwitcherFairlightAudioLimiterCallback;
interface IBMDSwitcherFairlightAudioLimiter;
interface IBMDSwitcherFairlightAudioCompressorCallback;
interface IBMDSwitcherFairlightAudioCompressor;
interface IBMDSwitcherFairlightAudioExpanderCallback;
interface IBMDSwitcherFairlightAudioExpander;
interface IBMDSwitcherFairlightAudioDynamicsProcessorCallback;
interface IBMDSwitcherFairlightAudioDynamicsProcessor;
interface IBMDSwitcherFairlightAudioEqualizerBandCallback;
interface IBMDSwitcherFairlightAudioEqualizerBand;
interface IBMDSwitcherFairlightAudioEqualizerBandIterator;
interface IBMDSwitcherFairlightAudioEqualizerCallback;
interface IBMDSwitcherFairlightAudioEqualizer;
interface IBMDSwitcherFairlightAudioSourceCallback;
interface IBMDSwitcherFairlightAudioSource;
interface IBMDSwitcherFairlightAudioSourceIterator;
interface IBMDSwitcherFairlightAnalogAudioInputCallback;
interface IBMDSwitcherFairlightAnalogAudioInput;
interface IBMDSwitcherFairlightAudioInputCallback;
interface IBMDSwitcherFairlightAudioInput;
interface IBMDSwitcherFairlightAudioInputIterator;
interface IBMDSwitcherFairlightAudioHeadphoneOutputCallback;
interface IBMDSwitcherFairlightAudioHeadphoneOutput;
interface IBMDSwitcherFairlightAudioHeadphoneOutputIterator;
interface IBMDSwitcherFairlightAudioMixerCallback;
interface IBMDSwitcherFairlightAudioMixer;
interface IBMDSwitcherKeyLumaParametersCallback;
interface IBMDSwitcherKeyLumaParameters;
interface IBMDSwitcherKeyChromaParametersCallback;
interface IBMDSwitcherKeyChromaParameters;
interface IBMDSwitcherKeyAdvancedChromaParametersCallback;
interface IBMDSwitcherKeyAdvancedChromaParameters;
interface IBMDSwitcherKeyPatternParametersCallback;
interface IBMDSwitcherKeyPatternParameters;
interface IBMDSwitcherKeyFlyKeyFrameParametersCallback;
interface IBMDSwitcherKeyFlyKeyFrameParameters;
interface IBMDSwitcherKeyFlyParametersCallback;
interface IBMDSwitcherKeyFlyParameters;
interface IBMDSwitcherKeyDVEParametersCallback;
interface IBMDSwitcherKeyDVEParameters;
interface IBMDSwitcherKeyCallback;
interface IBMDSwitcherKey;
interface IBMDSwitcherMediaPlayerCallback;
interface IBMDSwitcherMediaPlayer;
interface IBMDSwitcherTransitionMixParametersCallback;
interface IBMDSwitcherTransitionMixParameters;
interface IBMDSwitcherTransitionDipParametersCallback;
interface IBMDSwitcherTransitionDipParameters;
interface IBMDSwitcherTransitionWipeParametersCallback;
interface IBMDSwitcherTransitionWipeParameters;
interface IBMDSwitcherTransitionDVEParametersCallback;
interface IBMDSwitcherTransitionDVEParameters;
interface IBMDSwitcherTransitionStingerParametersCallback;
interface IBMDSwitcherTransitionStingerParameters;
interface IBMDSwitcherTransitionParametersCallback;
interface IBMDSwitcherTransitionParameters;
interface IBMDSwitcherMixEffectBlockCallback;
interface IBMDSwitcherMixEffectBlock;
interface IBMDSwitcherInputCallback;
interface IBMDSwitcherInput;
interface IBMDSwitcherInputColorCallback;
interface IBMDSwitcherInputColor;
interface IBMDSwitcherInputAuxCallback;
interface IBMDSwitcherInputAux;
interface IBMDSwitcherSuperSourceBoxCallback;
interface IBMDSwitcherSuperSourceBox;
interface IBMDSwitcherSuperSourceBorderCallback;
interface IBMDSwitcherSuperSourceBorder;
interface IBMDSwitcherInputSuperSourceCallback;
interface IBMDSwitcherInputSuperSource;
interface IBMDSwitcherMultiViewCallback;
interface IBMDSwitcherMultiView;
interface IBMDSwitcherDownstreamKeyCallback;
interface IBMDSwitcherDownstreamKey;
interface IBMDSwitcherInputIterator;
interface IBMDSwitcherSuperSourceBoxIterator;
interface IBMDSwitcherMixEffectBlockIterator;
interface IBMDSwitcherDownstreamKeyIterator;
interface IBMDSwitcherKeyIterator;
interface IBMDSwitcherMediaPlayerIterator;
interface IBMDSwitcherMultiViewIterator;
interface IBMDSwitcherAudioMonitorOutputIterator;
interface IBMDSwitcherAudioHeadphoneOutputIterator;
interface IBMDSwitcherAudioInputIterator;
interface IBMDSwitcherSerialPortIterator;
interface IBMDSwitcherHyperDeckIterator;
interface IBMDSwitcherMixMinusOutputIterator;
interface IBMDSwitcherTalkbackIterator;
interface IBMDSwitcherCallback;
interface IBMDSwitcher;
interface IBMDSwitcherDiscovery;
interface IBMDSwitcherFrame;
interface IBMDSwitcherAudio;
interface IBMDSwitcherLockCallback;
interface IBMDSwitcherStillsCallback;
interface IBMDSwitcherStills;
interface IBMDSwitcherClipCallback;
interface IBMDSwitcherClip;
interface IBMDSwitcherMediaPoolCallback;
interface IBMDSwitcherMediaPool;
interface IBMDSwitcherStillCapture;
interface IBMDSwitcherStillCaptureCallback;
interface IBMDSwitcherSaveRecall;
interface IBMDSwitcherRecordDiskIterator;
interface IBMDSwitcherRecordDisk;
interface IBMDSwitcherRecordDiskCallback;
interface IBMDSwitcherRecordAV;
interface IBMDSwitcherRecordAVCallback;
interface IBMDSwitcherStreamRTMP;
interface IBMDSwitcherStreamRTMPCallback;
interface IBMDSwitcherCameraControlParameterIterator;
interface IBMDSwitcherCameraControlCallback;
interface IBMDSwitcherCameraControl;
interface IBMDSwitcherMacro;
interface IBMDSwitcherTransferMacro;
interface IBMDSwitcherMacroPoolCallback;
interface IBMDSwitcherMacroPool;
interface IBMDSwitcherMacroControlCallback;
interface IBMDSwitcherMacroControl;
interface IBMDSwitcherSerialPortCallback;
interface IBMDSwitcherSerialPort;
interface IBMDSwitcherHyperDeckClipCallback;
interface IBMDSwitcherHyperDeckClip;
interface IBMDSwitcherHyperDeckClipIterator;
interface IBMDSwitcherHyperDeckCallback;
interface IBMDSwitcherHyperDeck;
interface IBMDSwitcherMixMinusOutput;
interface IBMDSwitcherMixMinusOutputCallback;
interface IBMDSwitcherAudioInputXLRCallback;
interface IBMDSwitcherAudioInputXLR;

/* Interface IBMDSwitcherAudioMonitorOutputCallback - Audio Monitor Output Object Callback */

[
    object,
    uuid(CB5EFB16-0474-4FAA-B071-17FA0DADD19F),
    helpstring("Audio Monitor Output Object Callback")
] interface IBMDSwitcherAudioMonitorOutputCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherAudioMonitorOutputEventType eventType);
    HRESULT LevelNotification ([in] double left, [in] double right, [in] double peakLeft, [in] double peakRight);
};

/* Interface IBMDSwitcherAudioMonitorOutput - Audio Monitor Output Object */

[
    object,
    uuid(21E041C3-6C69-4A95-A6CC-AE7A57257407),
    helpstring("Audio Monitor Output Object")
] interface IBMDSwitcherAudioMonitorOutput : IUnknown
{
    HRESULT GetMonitorEnable ([out] BOOL* enable);
    HRESULT SetMonitorEnable ([in] BOOL enable);	// When set to false, this output mirrors the output of Program Out and Monitor Functionality is disabled
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetMute ([out] BOOL* mute);
    HRESULT SetMute ([in] BOOL mute);
    HRESULT GetSolo ([out] BOOL* solo);
    HRESULT SetSolo ([in] BOOL solo);
    HRESULT GetSoloInput ([out] BMDSwitcherAudioInputId* audioInput);
    HRESULT SetSoloInput ([in] BMDSwitcherAudioInputId audioInput);
    HRESULT GetDim ([out] BOOL* dim);
    HRESULT SetDim ([in] BOOL dim);
    HRESULT GetDimLevel ([out] double* gain);
    HRESULT SetDimLevel ([in] double gain);
    HRESULT ResetLevelNotificationPeaks (void);
    HRESULT AddCallback ([in] IBMDSwitcherAudioMonitorOutputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherAudioMonitorOutputCallback* callback);
};

/* Interface IBMDSwitcherAudioInputCallback - Audio Input Object Callback */

[
    object,
    uuid(26E05D77-EFB9-4253-86D8-2F1E82E462F6),
    helpstring("Audio Input Object Callback")
] interface IBMDSwitcherAudioInputCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherAudioInputEventType eventType);
    HRESULT LevelNotification ([in] double left, [in] double right, [in] double peakLeft, [in] double peakRight);
};

/* Interface IBMDSwitcherAudioInput - Audio Input Object */

[
    object,
    uuid(321EA41E-544B-491B-B9AA-F6FCAECEF74F),
    helpstring("Audio Input Object")
] interface IBMDSwitcherAudioInput : IUnknown
{
    HRESULT GetType ([out] BMDSwitcherAudioInputType* type);
    HRESULT GetCurrentExternalPortType ([out] BMDSwitcherExternalPortType* type);
    HRESULT GetMixOption ([out] BMDSwitcherAudioMixOption* mixOption);
    HRESULT SetMixOption ([in] BMDSwitcherAudioMixOption mixOption);
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetBalance ([out] double* balance);
    HRESULT SetBalance ([in] double balance);
    HRESULT IsMixedIn ([out] BOOL* mixedIn);
    HRESULT GetAudioInputId ([out] BMDSwitcherAudioInputId* audioInputId);
    HRESULT ResetLevelNotificationPeaks (void);
    HRESULT AddCallback ([in] IBMDSwitcherAudioInputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherAudioInputCallback* callback);
};

/* Interface IBMDSwitcherAudioMixerCallback - Audio Mixer Object Callback */

[
    object,
    uuid(A203DA24-9910-450C-AA6A-9AA05C5C856E),
    helpstring("Audio Mixer Object Callback")
] interface IBMDSwitcherAudioMixerCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherAudioMixerEventType eventType);
    HRESULT ProgramOutLevelNotification ([in] double left, [in] double right, [in] double peakLeft, [in] double peakRight);
};

/* Interface IBMDSwitcherAudioMixer - Audio Mixer Object */

[
    object,
    uuid(BCED8CA2-E915-4701-87D4-F68045701E09),
    helpstring("Audio Mixer Object")
] interface IBMDSwitcherAudioMixer : IUnknown
{
    HRESULT GetProgramOutGain ([out] double* gain);
    HRESULT SetProgramOutGain ([in] double gain);
    HRESULT GetProgramOutBalance ([out] double* balance /* [-1.00, 1.00] */);
    HRESULT SetProgramOutBalance ([in] double balance /* [-1.00, 1.00] */);
    HRESULT GetProgramOutFollowFadeToBlack ([out] BOOL* follow);
    HRESULT SetProgramOutFollowFadeToBlack ([in] BOOL follow);
    HRESULT GetAudioFollowVideoCrossfadeTransition ([out] BOOL* transition);
    HRESULT SetAudioFollowVideoCrossfadeTransition ([in] BOOL transition);
    HRESULT SetAllLevelNotificationsEnable ([in] BOOL enable);
    HRESULT ResetProgramOutLevelNotificationPeaks (void);
    HRESULT ResetAllLevelNotificationPeaks (void);
    HRESULT AddCallback ([in] IBMDSwitcherAudioMixerCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherAudioMixerCallback* callback);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
};

/* Interface IBMDSwitcherTalkbackCallback - Talkback Object Callback */

[
    object,
    uuid(5F9A1C63-791C-4573-B28B-D9F2C00B8368),
    helpstring("Talkback Object Callback")
] interface IBMDSwitcherTalkbackCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherTalkbackEventType eventType, [in] BMDSwitcherAudioInputId audioInputId);
};

/* Interface IBMDSwitcherTalkback - Talkback Object */

[
    object,
    uuid(5FB45599-DD69-49C5-AB0B-D7D593829E63),
    helpstring("Talkback Object")
] interface IBMDSwitcherTalkback : IUnknown
{
    HRESULT GetId ([out] BMDSwitcherTalkbackId* talkbackId);
    HRESULT GetMuteSDI ([out] BOOL* muteSDI);
    HRESULT SetMuteSDI ([in] BOOL muteSDI);
    HRESULT InputCanMuteSDI ([in] BMDSwitcherAudioInputId audioInputId, [out] BOOL* canMuteSDI);
    HRESULT CurrentInputSupportsMuteSDI ([in] BMDSwitcherAudioInputId audioInputId, [out] BOOL* supportsMuteSDI);
    HRESULT GetInputMuteSDI ([in] BMDSwitcherAudioInputId audioInputId, [out] BOOL* muteSDI);
    HRESULT SetInputMuteSDI ([in] BMDSwitcherAudioInputId audioInputId, [in] BOOL muteSDI);
    HRESULT AddCallback ([in] IBMDSwitcherTalkbackCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherTalkbackCallback* callback);
};

/* Interface IBMDSwitcherAudioHeadphoneOutput - Headphone Output Object */

[
    object,
    uuid(A2836B54-B3A0-4C6B-8BC8-16DC81213C60),
    helpstring("Headphone Output Object")
] interface IBMDSwitcherAudioHeadphoneOutput : IUnknown
{
    HRESULT GetGain ([out] double* decibel);
    HRESULT SetGain ([in] double decibel);
    HRESULT GetInputProgramOutGain ([out] double* decibel);
    HRESULT SetInputProgramOutGain ([in] double decibel);
    HRESULT GetInputTalkbackGain ([out] double* decibel);
    HRESULT SetInputTalkbackGain ([in] double decibel);
    HRESULT GetInputSidetoneGain ([out] double* decibel);
    HRESULT SetInputSidetoneGain ([in] double decibel);
    HRESULT AddCallback ([in] IBMDSwitcherAudioHeadphoneOutputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherAudioHeadphoneOutputCallback* callback);
};

/* Interface IBMDSwitcherAudioHeadphoneOutputCallback - Headphone Output Object Callback */

[
    object,
    uuid(C97CD29E-1871-42EE-9A51-DF34B6A5ACDB),
    helpstring("Headphone Output Object Callback")
] interface IBMDSwitcherAudioHeadphoneOutputCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherAudioHeadphoneOutputEventType eventType);
};

/* Interface IBMDSwitcherFairlightAudioLimiterCallback - Fairlight Audio Limiter Object Callback */

[
    object,
    uuid(57F7BAD2-4245-43C8-B772-06FE98841AD8),
    helpstring("Fairlight Audio Limiter Object Callback")
] interface IBMDSwitcherFairlightAudioLimiterCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioLimiterEventType eventType);
    HRESULT GainReductionLevelNotification ([in] unsigned int numLevels, [in] const double* levels /* in dB */);
};

/* Interface IBMDSwitcherFairlightAudioLimiter - Fairlight Audio Limiter Object */

[
    object,
    uuid(88278FFF-4DB1-40A3-B4EF-01F329281411),
    helpstring("Fairlight Audio Limiter Object")
] interface IBMDSwitcherFairlightAudioLimiter : IUnknown
{
    HRESULT GetEnabled ([out] BOOL* enabled);
    HRESULT SetEnabled ([in] BOOL enabled);
    HRESULT GetThreshold ([out] double* decibel);
    HRESULT SetThreshold ([in] double decibel);
    HRESULT GetAttack ([out] double* ms);
    HRESULT SetAttack ([in] double ms);
    HRESULT GetHold ([out] double* ms);
    HRESULT SetHold ([in] double ms);
    HRESULT GetRelease ([out] double* ms);
    HRESULT SetRelease ([in] double ms);
    HRESULT Reset (void);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioLimiterCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioLimiterCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioCompressorCallback - Fairlight Audio Compressor Object Callback */

[
    object,
    uuid(EF39CA99-2E98-4C77-9D75-39E05D12E98A),
    helpstring("Fairlight Audio Compressor Object Callback")
] interface IBMDSwitcherFairlightAudioCompressorCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioCompressorEventType eventType);
    HRESULT GainReductionLevelNotification ([in] unsigned int numLevels, [in] const double* levels /* in dB */);
};

/* Interface IBMDSwitcherFairlightAudioCompressor - Fairlight Audio Compressor Object */

[
    object,
    uuid(8E2A2B9A-B63A-4D9B-A88E-CF71CF64638F),
    helpstring("Fairlight Audio Compressor Object")
] interface IBMDSwitcherFairlightAudioCompressor : IUnknown
{
    HRESULT GetEnabled ([out] BOOL* enabled);
    HRESULT SetEnabled ([in] BOOL enabled);
    HRESULT GetThreshold ([out] double* decibel);
    HRESULT SetThreshold ([in] double decibel);
    HRESULT GetRatio ([out] double* ratio);
    HRESULT SetRatio ([in] double ratio);
    HRESULT GetAttack ([out] double* ms);
    HRESULT SetAttack ([in] double ms);
    HRESULT GetHold ([out] double* ms);
    HRESULT SetHold ([in] double ms);
    HRESULT GetRelease ([out] double* ms);
    HRESULT SetRelease ([in] double ms);
    HRESULT Reset (void);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioCompressorCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioCompressorCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioExpanderCallback - Fairlight Audio Expander Object Callback */

[
    object,
    uuid(CBE12618-C52F-4403-9372-51C9EBB0A00A),
    helpstring("Fairlight Audio Expander Object Callback")
] interface IBMDSwitcherFairlightAudioExpanderCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioExpanderEventType eventType);
    HRESULT GainReductionLevelNotification ([in] unsigned int numLevels, [in] const double* levels /* in dB */);
};

/* Interface IBMDSwitcherFairlightAudioExpander - Fairlight Audio Expander Object */

[
    object,
    uuid(23299B11-9A28-42B2-8467-21EF003F035B),
    helpstring("Fairlight Audio Expander Object")
] interface IBMDSwitcherFairlightAudioExpander : IUnknown
{
    HRESULT GetEnabled ([out] BOOL* enabled);
    HRESULT SetEnabled ([in] BOOL enabled);
    HRESULT GetGateMode ([out] BOOL* gateMode);
    HRESULT SetGateMode ([in] BOOL gateMode);
    HRESULT GetThreshold ([out] double* decibel);
    HRESULT SetThreshold ([in] double decibel);
    HRESULT GetRange ([out] double* range);
    HRESULT SetRange ([in] double range);
    HRESULT GetRatio ([out] double* ratio);
    HRESULT SetRatio ([in] double ratio);
    HRESULT GetAttack ([out] double* ms);
    HRESULT SetAttack ([in] double ms);
    HRESULT GetHold ([out] double* ms);
    HRESULT SetHold ([in] double ms);
    HRESULT GetRelease ([out] double* ms);
    HRESULT SetRelease ([in] double ms);
    HRESULT Reset (void);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioExpanderCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioExpanderCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioDynamicsProcessorCallback - Fairlight Audio Dynamics Processor Object Callback */

[
    object,
    uuid(B27B3C93-7B9C-4867-B9D5-062D0AF434F1),
    helpstring("Fairlight Audio Dynamics Processor Object Callback")
] interface IBMDSwitcherFairlightAudioDynamicsProcessorCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioDynamicsProcessorEventType eventType);
    HRESULT InputLevelNotification ([in] unsigned int numLevels, [in] const double* levels /* in dBFS */, [in] unsigned int numPeakLevels, [in] const double* peakLevels /* in dBFS */);
    HRESULT OutputLevelNotification ([in] unsigned int numLevels, [in] const double* levels /* in dBFS */, [in] unsigned int numPeakLevels, [in] const double* peakLevels /* in dBFS */);
};

/* Interface IBMDSwitcherFairlightAudioDynamicsProcessor - Fairlight Audio Dynamics Processor Object */

[
    object,
    uuid(8AB79F5B-79E6-46DC-BD05-12A1EF41E877),
    helpstring("Fairlight Audio Dynamics Processor Object")
] interface IBMDSwitcherFairlightAudioDynamicsProcessor : IUnknown
{
    HRESULT GetProcessor ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetMakeupGain ([out] double* gain);
    HRESULT SetMakeupGain ([in] double gain);
    HRESULT Reset (void);
    HRESULT ResetInputPeakLevels (void);
    HRESULT ResetOutputPeakLevels (void);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioDynamicsProcessorCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioDynamicsProcessorCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioEqualizerBandCallback - Fairlight Audio Equalizer Band Object Callback */

[
    object,
    uuid(F1889F6C-9BAD-41A0-BC89-25158BA43B8A),
    helpstring("Fairlight Audio Equalizer Band Object Callback")
] interface IBMDSwitcherFairlightAudioEqualizerBandCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioEqualizerBandEventType eventType);
};

/* Interface IBMDSwitcherFairlightAudioEqualizerBand - Fairlight Audio Equalizer Band Object */

[
    object,
    uuid(2E3EA367-C6F3-4396-A037-B28CED60D644),
    helpstring("Fairlight Audio Equalizer Band Object")
] interface IBMDSwitcherFairlightAudioEqualizerBand : IUnknown
{
    HRESULT GetEnabled ([out] BOOL* enabled);
    HRESULT SetEnabled ([in] BOOL enabled);
    HRESULT GetSupportedShapes ([out] BMDSwitcherFairlightAudioEqualizerBandShape* shapes);
    HRESULT GetShape ([out] BMDSwitcherFairlightAudioEqualizerBandShape* shape);
    HRESULT SetShape ([in] BMDSwitcherFairlightAudioEqualizerBandShape shape);
    HRESULT GetSupportedFrequencyRanges ([out] BMDSwitcherFairlightAudioEqualizerBandFrequencyRange* ranges);
    HRESULT GetFrequencyRange ([out] BMDSwitcherFairlightAudioEqualizerBandFrequencyRange* range);
    HRESULT SetFrequencyRange ([in] BMDSwitcherFairlightAudioEqualizerBandFrequencyRange range);
    HRESULT GetFrequencyRangeMinMax ([in] BMDSwitcherFairlightAudioEqualizerBandFrequencyRange range, [out] unsigned int* minFreq, [out] unsigned int* maxFreq);
    HRESULT GetFrequency ([out] unsigned int* freq);
    HRESULT SetFrequency ([in] unsigned int freq);
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetQFactor ([out] double* value);
    HRESULT SetQFactor ([in] double value);
    HRESULT Reset (void);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioEqualizerBandCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioEqualizerBandCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioEqualizerBandIterator - Fairlight Audio Equalizer Band Iterator */

[
    object,
    uuid(6A5FA2E1-49A3-4BC8-80D5-C8B668293854),
    helpstring("Fairlight Audio Equalizer Band Iterator")
] interface IBMDSwitcherFairlightAudioEqualizerBandIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherFairlightAudioEqualizerBand** audioEqualizerBand);
};

/* Interface IBMDSwitcherFairlightAudioEqualizerCallback - Fairlight Audio Equalizer Object Callback */

[
    object,
    uuid(75057AA9-15A1-4CA9-A143-3661764C887F),
    helpstring("Fairlight Audio Equalizer Object Callback")
] interface IBMDSwitcherFairlightAudioEqualizerCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioEqualizerEventType eventType);
};

/* Interface IBMDSwitcherFairlightAudioEqualizer - Fairlight Audio Equalizer Object */

[
    object,
    uuid(89E3453D-FA23-40C5-BB16-A19FEEBCF0DE),
    helpstring("Fairlight Audio Equalizer Object")
] interface IBMDSwitcherFairlightAudioEqualizer : IUnknown
{
    HRESULT GetEnabled ([out] BOOL* enabled);
    HRESULT SetEnabled ([in] BOOL enabled);
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT Reset (void);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioEqualizerCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioEqualizerCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioSourceCallback - Fairlight Audio Source Object Callback */

[
    object,
    uuid(E9331BC4-6E0F-44DD-8F90-5FC159EFF8E5),
    helpstring("Fairlight Audio Source Object Callback")
] interface IBMDSwitcherFairlightAudioSourceCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioSourceEventType eventType);
    HRESULT OutputLevelNotification ([in] unsigned int numLevels, [in] const double* levels /* in dBFS */, [in] unsigned int numPeakLevels, [in] const double* peakLevels /* in dBFS */);
};

/* Interface IBMDSwitcherFairlightAudioSource - Fairlight Audio Source Object */

[
    object,
    uuid(D8D1D78D-0B9F-4300-9734-AE8DA35A8ECA),
    helpstring("Fairlight Audio Source Object")
] interface IBMDSwitcherFairlightAudioSource : IUnknown
{
    HRESULT IsActive ([out] BOOL* active);
    HRESULT GetSourceType ([out] BMDSwitcherFairlightAudioSourceType* type);
    HRESULT GetMaxDelayFrames ([out] unsigned short* maxDelay);
    HRESULT GetDelayFrames ([out] unsigned short* delay);
    HRESULT SetDelayFrames ([in] unsigned short delay);
    HRESULT GetInputGain ([out] double* gain);
    HRESULT SetInputGain ([in] double gain);
    HRESULT HasStereoSimulation ([out] BOOL* hasStereoSimulation);
    HRESULT GetStereoSimulationIntensity ([out] double* intensity);
    HRESULT SetStereoSimulationIntensity ([in] double intensity);
    HRESULT GetEffect ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetPan ([out] double* pan);
    HRESULT SetPan ([in] double pan);
    HRESULT GetFaderGain ([out] double* gain);
    HRESULT SetFaderGain ([in] double gain);
    HRESULT GetSupportedMixOptions ([out] BMDSwitcherFairlightAudioMixOption* mixOptions);
    HRESULT GetMixOption ([out] BMDSwitcherFairlightAudioMixOption* mixOption);
    HRESULT SetMixOption ([in] BMDSwitcherFairlightAudioMixOption mixOption);
    HRESULT IsMixedIn ([out] BOOL* mixedIn);
    HRESULT ResetOutputPeakLevels (void);
    HRESULT GetId ([out] BMDSwitcherFairlightAudioSourceId* sourceId);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioSourceCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioSourceCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioSourceIterator - Fairlight Audio Source Iterator */

[
    object,
    uuid(050233A3-3244-46B0-A7CD-EF37A869ACDD),
    helpstring("Fairlight Audio Source Iterator")
] interface IBMDSwitcherFairlightAudioSourceIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherFairlightAudioSource** audioSource);
    HRESULT GetById ([in] BMDSwitcherFairlightAudioSourceId audioSourceId, [out] IBMDSwitcherFairlightAudioSource** audioSource);
};

/* Interface IBMDSwitcherFairlightAnalogAudioInputCallback - Fairlight Analog Audio Input Object Callback */

[
    object,
    uuid(A9B917B9-46C7-474D-BD86-75CC34D71AF8),
    helpstring("Fairlight Analog Audio Input Object Callback")
] interface IBMDSwitcherFairlightAnalogAudioInputCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAnalogAudioInputEventType eventType);
};

/* Interface IBMDSwitcherFairlightAnalogAudioInput - Fairlight Analog Audio Input Object */

[
    object,
    uuid(C3F347F3-49BB-4832-835C-E329FBF5707E),
    helpstring("Fairlight Analog Audio Input Object")
] interface IBMDSwitcherFairlightAnalogAudioInput : IUnknown
{
    HRESULT GetSupportedInputLevels ([out] BMDSwitcherFairlightAudioAnalogInputLevel* levels);
    HRESULT GetInputLevel ([out] BMDSwitcherFairlightAudioAnalogInputLevel* level);
    HRESULT SetInputLevel ([in] BMDSwitcherFairlightAudioAnalogInputLevel level);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAnalogAudioInputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAnalogAudioInputCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioInputCallback - Fairlight Audio Input Object Callback */

[
    object,
    uuid(25F66467-A6BB-4813-B214-158D0FF8653C),
    helpstring("Fairlight Audio Input Object Callback")
] interface IBMDSwitcherFairlightAudioInputCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioInputEventType eventType);
};

/* Interface IBMDSwitcherFairlightAudioInput - Fairlight Audio Input Object */

[
    object,
    uuid(96748040-89C2-44F3-BCC0-124BDB9E378F),
    helpstring("Fairlight Audio Input Object")
] interface IBMDSwitcherFairlightAudioInput : IUnknown
{
    HRESULT GetType ([out] BMDSwitcherFairlightAudioInputType* type);
    HRESULT GetCurrentExternalPortType ([out] BMDSwitcherExternalPortType* type);
    HRESULT GetSupportedConfigurations ([out] BMDSwitcherFairlightAudioInputConfiguration* supportedConfigurations);
    HRESULT GetConfiguration ([out] BMDSwitcherFairlightAudioInputConfiguration* configuration);
    HRESULT SetConfiguration ([in] BMDSwitcherFairlightAudioInputConfiguration configuration);
    HRESULT GetId ([out] BMDSwitcherAudioInputId* id);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioInputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioInputCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioInputIterator - Fairlight Audio Input Iterator */

[
    object,
    uuid(019DABB8-EF1A-4BB6-9460-6972C5AD2B07),
    helpstring("Fairlight Audio Input Iterator")
] interface IBMDSwitcherFairlightAudioInputIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherFairlightAudioInput** audioInput);
    HRESULT GetById ([in] BMDSwitcherAudioInputId audioInputId, [out] IBMDSwitcherFairlightAudioInput** audioInput);
};

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutputCallback - Fairlight Headphone Output Object Callback */

[
    object,
    uuid(13492CC6-F496-4CDE-8355-3645DE38A6F1),
    helpstring("Fairlight Headphone Output Object Callback")
] interface IBMDSwitcherFairlightAudioHeadphoneOutputCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioHeadphoneOutputEventType eventType);
};

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutput - Fairlight Headphone Output Object */

[
    object,
    uuid(A9E5FB7D-A436-4179-9F3F-FF2BD5580830),
    helpstring("Fairlight Headphone Output Object")
] interface IBMDSwitcherFairlightAudioHeadphoneOutput : IUnknown
{
    HRESULT GetGain ([out] double* decibel);
    HRESULT SetGain ([in] double decibel);
    HRESULT GetInputMasterOutGain ([out] double* decibel);
    HRESULT SetInputMasterOutGain ([in] double decibel);
    HRESULT GetInputTalkbackGain ([out] double* decibel);
    HRESULT SetInputTalkbackGain ([in] double decibel);
    HRESULT GetInputSidetoneGain ([out] double* decibel);
    HRESULT SetInputSidetoneGain ([in] double decibel);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioHeadphoneOutputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioHeadphoneOutputCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutputIterator - Fairlight Audio Headphone Output Iterator */

[
    object,
    uuid(63EED6B1-D574-4312-90B4-F6DEBC290701),
    helpstring("Fairlight Audio Headphone Output Iterator")
] interface IBMDSwitcherFairlightAudioHeadphoneOutputIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherFairlightAudioHeadphoneOutput** audioHeadphoneOutput);
};

/* Interface IBMDSwitcherFairlightAudioMixerCallback - Fairlight Audio Mixer Object Callback */

[
    object,
    uuid(071AFA58-5005-4BC9-A240-50656BFB2DFE),
    helpstring("Fairlight Audio Mixer Object Callback")
] interface IBMDSwitcherFairlightAudioMixerCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherFairlightAudioMixerEventType eventType);
    HRESULT MasterOutLevelNotification ([in] unsigned int numLevels, [in] const double* levels /* in dBFS */, [in] unsigned int numPeakLevels, [in] const double* peakLevels /* in dBFS */);
};

/* Interface IBMDSwitcherFairlightAudioMixer - Fairlight Audio Mixer Object */

[
    object,
    uuid(BC625428-D969-4512-9462-8AF8B65F0B21),
    helpstring("Fairlight Audio Mixer Object")
] interface IBMDSwitcherFairlightAudioMixer : IUnknown
{
    HRESULT GetMasterOutEffect ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetMasterOutFaderGain ([out] double* gain);
    HRESULT SetMasterOutFaderGain ([in] double gain);
    HRESULT GetMasterOutFollowFadeToBlack ([out] BOOL* follow);
    HRESULT SetMasterOutFollowFadeToBlack ([in] BOOL follow);
    HRESULT GetAudioFollowVideoCrossfadeTransition ([out] BOOL* transition);
    HRESULT SetAudioFollowVideoCrossfadeTransition ([in] BOOL transition);
    HRESULT SetAllLevelNotificationsEnabled ([in] BOOL enabled);
    HRESULT ResetMasterOutPeakLevels (void);
    HRESULT ResetAllPeakLevels (void);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioMixerCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioMixerCallback* callback);
};

/* Interface IBMDSwitcherKeyLumaParametersCallback - Luma Key Parameters Callback */

[
    object,
    uuid(AB31E347-5177-4595-8E52-650BF9B08B7F),
    helpstring("Luma Key Parameters Callback")
] interface IBMDSwitcherKeyLumaParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherKeyLumaParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyLumaParameters - Luma Key Parameters */

[
    object,
    uuid(EE88B575-6044-4372-B1D6-9733AF342DCA),
    helpstring("Luma Key Parameters")
] interface IBMDSwitcherKeyLumaParameters : IUnknown
{
    HRESULT GetPreMultiplied ([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied ([in] BOOL preMultiplied);
    HRESULT GetClip ([out] double* clip);
    HRESULT SetClip ([in] double clip);
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetInverse ([out] BOOL* inverse);
    HRESULT SetInverse ([in] BOOL inverse);
    HRESULT AddCallback ([in] IBMDSwitcherKeyLumaParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherKeyLumaParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyChromaParametersCallback - Chroma Key Parameters Callback */

[
    object,
    uuid(FE3F97EC-5F2D-4E47-AA7A-38962F9CB3CE),
    helpstring("Chroma Key Parameters Callback")
] interface IBMDSwitcherKeyChromaParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherKeyChromaParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyChromaParameters - Chroma Key Parameters */

[
    object,
    uuid(07658026-6AE3-4694-B814-2AB7EBBE7D1C),
    helpstring("Chroma Key Parameters")
] interface IBMDSwitcherKeyChromaParameters : IUnknown
{
    HRESULT GetHue ([out] double* hue);	// [0, 360)
    HRESULT SetHue ([in] double hue);	// [0, 360)
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetYSuppress ([out] double* ySuppress);
    HRESULT SetYSuppress ([in] double ySuppress);
    HRESULT GetLift ([out] double* lift);
    HRESULT SetLift ([in] double lift);
    HRESULT GetNarrow ([out] BOOL* narrow);
    HRESULT SetNarrow ([in] BOOL narrow);
    HRESULT AddCallback ([in] IBMDSwitcherKeyChromaParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherKeyChromaParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyAdvancedChromaParametersCallback - Advanced Chroma Key Parameters Callback */

[
    object,
    uuid(98AF2E4A-DCC5-4EEB-896F-CE2B78F213A4),
    helpstring("Advanced Chroma Key Parameters Callback")
] interface IBMDSwitcherKeyAdvancedChromaParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherKeyAdvancedChromaParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyAdvancedChromaParameters - Advanced Chroma Key Parameters */

[
    object,
    uuid(16CBDB44-C183-4110-AD6B-41C3398447E7),
    helpstring("Advanced Chroma Key Parameters")
] interface IBMDSwitcherKeyAdvancedChromaParameters : IUnknown
{
    HRESULT GetForegroundLevel ([out] double* level);
    HRESULT SetForegroundLevel ([in] double level);
    HRESULT GetBackgroundLevel ([out] double* level);
    HRESULT SetBackgroundLevel ([in] double level);
    HRESULT GetKeyEdge ([out] double* keyEdge);
    HRESULT SetKeyEdge ([in] double keyEdge);
    HRESULT GetSpillSuppress ([out] double* spillSuppress);
    HRESULT SetSpillSuppress ([in] double spillSuppress);
    HRESULT GetFlareSuppress ([out] double* flareSuppress);
    HRESULT SetFlareSuppress ([in] double flareSuppress);
    HRESULT GetBrightness ([out] double* brightness);
    HRESULT SetBrightness ([in] double brightness);
    HRESULT GetContrast ([out] double* contrast);
    HRESULT SetContrast ([in] double contrast);
    HRESULT GetSaturation ([out] double* saturation);
    HRESULT SetSaturation ([in] double saturation);
    HRESULT GetRed ([out] double* red);
    HRESULT SetRed ([in] double red);
    HRESULT GetGreen ([out] double* green);
    HRESULT SetGreen ([in] double green);
    HRESULT GetBlue ([out] double* blue);
    HRESULT SetBlue ([in] double blue);
    HRESULT GetSamplingModeEnabled ([out] BOOL* enabled);
    HRESULT SetSamplingModeEnabled ([in] BOOL enabled);
    HRESULT GetPreviewEnabled ([out] BOOL* enabled);
    HRESULT SetPreviewEnabled ([in] BOOL enabled);
    HRESULT GetCursorXPosition ([out] double* position);
    HRESULT SetCursorXPosition ([in] double position);
    HRESULT GetCursorYPosition ([out] double* position);
    HRESULT SetCursorYPosition ([in] double position);
    HRESULT GetCursorSize ([out] double* size);
    HRESULT SetCursorSize ([in] double size);
    HRESULT GetSampledColor ([out] double* y, [out] double* cb, [out] double* cr);
    HRESULT SetSampledColor ([in] double y, [in] double cb, [in] double cr);
    HRESULT ResetKeyAdjustments (void);	// Resets Foreground Level, Background Level, and Key Edge
    HRESULT ResetChromaCorrection (void);	// Resets Spill Suppress and Flare Suppress
    HRESULT ResetColorAdjustments (void);	// Resets Brightness, Contrast, Saturation, Red, Green, and Blue
    HRESULT AddCallback ([in] IBMDSwitcherKeyAdvancedChromaParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherKeyAdvancedChromaParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyPatternParametersCallback - Pattern Key Parameters Callback */

[
    object,
    uuid(FBF24499-06EB-4C54-BE92-21C403C1093C),
    helpstring("Pattern Key Parameters Callback")
] interface IBMDSwitcherKeyPatternParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherKeyPatternParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyPatternParameters - Pattern Key Parameters */

[
    object,
    uuid(267EDB96-5921-4BA5-88BA-C83123E153D2),
    helpstring("Pattern Key Parameters")
] interface IBMDSwitcherKeyPatternParameters : IUnknown
{
    HRESULT GetPattern ([out] BMDSwitcherPatternStyle* pattern);
    HRESULT SetPattern ([in] BMDSwitcherPatternStyle pattern);
    HRESULT GetSize ([out] double* size);
    HRESULT SetSize ([in] double size);
    HRESULT GetSymmetry ([out] double* symmetry);
    HRESULT SetSymmetry ([in] double symmetry);
    HRESULT GetSoftness ([out] double* softness);
    HRESULT SetSoftness ([in] double softness);
    HRESULT GetHorizontalOffset ([out] double* hOffset);
    HRESULT SetHorizontalOffset ([in] double hOffset);
    HRESULT GetVerticalOffset ([out] double* vOffset);
    HRESULT SetVerticalOffset ([in] double vOffset);
    HRESULT GetInverse ([out] BOOL* inverse);
    HRESULT SetInverse ([in] BOOL inverse);
    HRESULT AddCallback ([in] IBMDSwitcherKeyPatternParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherKeyPatternParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyFlyKeyFrameParametersCallback - Key Fly Frame Parameters Callback */

[
    object,
    uuid(136BDD85-690B-4691-BA1D-AB8A61F97AE0),
    helpstring("Key Fly Frame Parameters Callback")
] interface IBMDSwitcherKeyFlyKeyFrameParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherKeyFlyKeyFrameParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyFlyKeyFrameParameters - Key Fly Frame Parameters */

[
    object,
    uuid(57F0D002-53BB-4787-83F9-1851A257B116),
    helpstring("Key Fly Frame Parameters")
] interface IBMDSwitcherKeyFlyKeyFrameParameters : IUnknown
{
    HRESULT GetSizeX ([out] double* multiplierX);
    HRESULT SetSizeX ([in] double multiplierX);
    HRESULT GetSizeY ([out] double* multiplierY);
    HRESULT SetSizeY ([in] double multiplierY);
    HRESULT GetCanScaleUp ([out] BOOL* canScaleUp);
    HRESULT GetPositionX ([out] double* offsetX);
    HRESULT SetPositionX ([in] double offsetX);
    HRESULT GetPositionY ([out] double* offsetY);
    HRESULT SetPositionY ([in] double offsetY);
    HRESULT GetRotation ([out] double* degrees);
    HRESULT SetRotation ([in] double degrees);
    HRESULT GetCanRotate ([out] BOOL* canRotate);
    HRESULT GetBorderWidthOut ([out] double* widthOut);
    HRESULT SetBorderWidthOut ([in] double widthOut);
    HRESULT GetBorderWidthIn ([out] double* widthIn);
    HRESULT SetBorderWidthIn ([in] double widthIn);
    HRESULT GetBorderSoftnessOut ([out] double* softOut);
    HRESULT SetBorderSoftnessOut ([in] double softOut);
    HRESULT GetBorderSoftnessIn ([out] double* softIn);
    HRESULT SetBorderSoftnessIn ([in] double softIn);
    HRESULT GetBorderBevelSoftness ([out] double* bevelSoft);
    HRESULT SetBorderBevelSoftness ([in] double bevelSoft);
    HRESULT GetBorderBevelPosition ([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition ([in] double bevelPosition);
    HRESULT GetBorderOpacity ([out] double* opacity);
    HRESULT SetBorderOpacity ([in] double opacity);
    HRESULT GetBorderHue ([out] double* hue /* [0, 360) */);
    HRESULT SetBorderHue ([in] double hue /* [0, 360) */);
    HRESULT GetBorderSaturation ([out] double* sat);
    HRESULT SetBorderSaturation ([in] double sat);
    HRESULT GetBorderLuma ([out] double* luma);
    HRESULT SetBorderLuma ([in] double luma);
    HRESULT GetBorderLightSourceDirection ([out] double* degrees /* [0, 360) */);
    HRESULT SetBorderLightSourceDirection ([in] double degrees /* [0, 360) */);
    HRESULT GetBorderLightSourceAltitude ([out] double* altitude);
    HRESULT SetBorderLightSourceAltitude ([in] double altitude);
    HRESULT GetMaskTop ([out] double* top);
    HRESULT SetMaskTop ([in] double top);
    HRESULT GetMaskBottom ([out] double* bottom);
    HRESULT SetMaskBottom ([in] double bottom);
    HRESULT GetMaskLeft ([out] double* left);
    HRESULT SetMaskLeft ([in] double left);
    HRESULT GetMaskRight ([out] double* right);
    HRESULT SetMaskRight ([in] double right);
    HRESULT AddCallback ([in] IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyFlyParametersCallback - Key Fly Parameters Callback */

[
    object,
    uuid(A9D6543D-0447-4048-B5AD-806622B9BF1A),
    helpstring("Key Fly Parameters Callback")
] interface IBMDSwitcherKeyFlyParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherKeyFlyParametersEventType eventType, [in] BMDSwitcherFlyKeyFrame keyFrame /* Only used when eventType is bmdSwitcherFlyParametersEventTypeIsKeyFrameStoredChanged */);
};

/* Interface IBMDSwitcherKeyFlyParameters - Key Fly Parameters */

[
    object,
    uuid(36CD0B7F-E52E-4D94-ADF5-EEDCA6BCDF82),
    helpstring("Key Fly Parameters")
] interface IBMDSwitcherKeyFlyParameters : IUnknown
{
    HRESULT GetFly ([out] BOOL* isFlyKey);
    HRESULT SetFly ([in] BOOL isFlyKey);
    HRESULT GetCanFly ([out] BOOL* canFly);
    HRESULT GetRate ([out] unsigned int* frames);
    HRESULT SetRate ([in] unsigned int frames);
    HRESULT GetSizeX ([out] double* multiplierX);
    HRESULT SetSizeX ([in] double multiplierX);
    HRESULT GetSizeY ([out] double* multiplierY);
    HRESULT SetSizeY ([in] double multiplierY);
    HRESULT GetCanScaleUp ([out] BOOL* canScaleUp);
    HRESULT GetPositionX ([out] double* offsetX);
    HRESULT SetPositionX ([in] double offsetX);
    HRESULT GetPositionY ([out] double* offsetY);
    HRESULT SetPositionY ([in] double offsetY);
    HRESULT GetRotation ([out] double* degrees);
    HRESULT SetRotation ([in] double degrees);
    HRESULT GetCanRotate ([out] BOOL* canRotate);
    HRESULT ResetRotation (void);
    HRESULT ResetDVE (void);	// Resets all DVE parameters, excluding mask
    HRESULT ResetDVEFull (void);	// Resets all DVE parameters to full screen, excluding mask
    HRESULT IsKeyFrameStored ([in] BMDSwitcherFlyKeyFrame keyFrame, [out] BOOL* stored);
    HRESULT StoreAsKeyFrame ([in] BMDSwitcherFlyKeyFrame keyFrame);	// Stores current state into the specified Key Frame(s), only Key Frame A and/or B can be specified.
    HRESULT ClearKeyFrame ([in] BMDSwitcherFlyKeyFrame keyFrame);	// Clears the specified Key Frame(s), only Key Frame A and/or B can be specified.
    HRESULT RunToKeyFrame ([in] BMDSwitcherFlyKeyFrame destination);	// Can only specify 1 Key Frame destination
    HRESULT IsAtKeyFrames ([out] BMDSwitcherFlyKeyFrame* keyFrames);
    HRESULT GetKeyFrameParameters ([in] BMDSwitcherFlyKeyFrame keyFrame, [out] IBMDSwitcherKeyFlyKeyFrameParameters** keyFrameParameters);
    HRESULT IsRunning ([out] BOOL* isRunning, [out] BMDSwitcherFlyKeyFrame* destination);
    HRESULT AddCallback ([in] IBMDSwitcherKeyFlyParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherKeyFlyParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyDVEParametersCallback - DVE Key Parameters Callback */

[
    object,
    uuid(E437655F-32BB-4652-BA77-4083B435566A),
    helpstring("DVE Key Parameters Callback")
] interface IBMDSwitcherKeyDVEParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherKeyDVEParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyDVEParameters - DVE Key Parameters */

[
    object,
    uuid(92AA5433-70FB-423D-9435-646D171C9D82),
    helpstring("DVE Key Parameters")
] interface IBMDSwitcherKeyDVEParameters : IUnknown
{
    HRESULT GetShadow ([out] BOOL* shadowOn);
    HRESULT SetShadow ([in] BOOL shadowOn);
    HRESULT GetLightSourceDirection ([out] double* degrees /* [0, 360) */);
    HRESULT SetLightSourceDirection ([in] double degrees /* [0, 360) */);
    HRESULT GetLightSourceAltitude ([out] double* altitude);
    HRESULT SetLightSourceAltitude ([in] double altitude);
    HRESULT GetBorderEnabled ([out] BOOL* on);
    HRESULT SetBorderEnabled ([in] BOOL on);
    HRESULT GetBorderBevel ([out] BMDSwitcherBorderBevelOption* bevelOption);
    HRESULT SetBorderBevel ([in] BMDSwitcherBorderBevelOption bevelOption);
    HRESULT GetBorderWidthIn ([out] double* widthIn);
    HRESULT SetBorderWidthIn ([in] double widthIn);
    HRESULT GetBorderWidthOut ([out] double* widthOut);
    HRESULT SetBorderWidthOut ([in] double widthOut);
    HRESULT GetBorderSoftnessIn ([out] double* softIn);
    HRESULT SetBorderSoftnessIn ([in] double softIn);
    HRESULT GetBorderSoftnessOut ([out] double* softOut);
    HRESULT SetBorderSoftnessOut ([in] double softOut);
    HRESULT GetBorderBevelSoftness ([out] double* bevelSoft);
    HRESULT SetBorderBevelSoftness ([in] double bevelSoft);
    HRESULT GetBorderBevelPosition ([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition ([in] double bevelPosition);
    HRESULT GetBorderOpacity ([out] double* opacity);
    HRESULT SetBorderOpacity ([in] double opacity);
    HRESULT GetBorderHue ([out] double* hue /* [0, 360) */);
    HRESULT SetBorderHue ([in] double hue /* [0, 360) */);
    HRESULT GetBorderSaturation ([out] double* sat);
    HRESULT SetBorderSaturation ([in] double sat);
    HRESULT GetBorderLuma ([out] double* luma);
    HRESULT SetBorderLuma ([in] double luma);
    HRESULT GetMasked ([out] BOOL* maskEnabled);
    HRESULT SetMasked ([in] BOOL maskEnabled);
    HRESULT GetMaskTop ([out] double* top);
    HRESULT SetMaskTop ([in] double top);
    HRESULT GetMaskBottom ([out] double* bottom);
    HRESULT SetMaskBottom ([in] double bottom);
    HRESULT GetMaskLeft ([out] double* left);
    HRESULT SetMaskLeft ([in] double left);
    HRESULT GetMaskRight ([out] double* right);
    HRESULT SetMaskRight ([in] double right);
    HRESULT ResetMask (void);
    HRESULT AddCallback ([in] IBMDSwitcherKeyDVEParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherKeyDVEParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyCallback - Key Object Callback */

[
    object,
    uuid(1972E4DF-1D5F-4C4E-A79B-E5A6E8CE1511),
    helpstring("Key Object Callback")
] interface IBMDSwitcherKeyCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherKeyEventType eventType);
};

/* Interface IBMDSwitcherKey - Key Object */

[
    object,
    uuid(4D5D7497-26E1-4AEF-9276-14532BD611FD),
    helpstring("Key Object")
] interface IBMDSwitcherKey : IUnknown
{
    HRESULT DoesSupportAdvancedChroma ([out] BOOL* supportsAdvancedChroma);
    HRESULT GetType ([out] BMDSwitcherKeyType* type);
    HRESULT SetType ([in] BMDSwitcherKeyType type);
    HRESULT GetInputCut ([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut ([in] BMDSwitcherInputId input);
    HRESULT GetInputFill ([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill ([in] BMDSwitcherInputId input);
    HRESULT GetCutInputAvailabilityMask ([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT GetFillInputAvailabilityMask ([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT GetOnAir ([out] BOOL* onAir);
    HRESULT SetOnAir ([in] BOOL onAir);
    HRESULT CanBeDVEKey ([out] BOOL* canDVE);
    HRESULT GetMasked ([out] BOOL* maskEnabled);
    HRESULT SetMasked ([in] BOOL maskEnabled);
    HRESULT GetMaskTop ([out] double* top);
    HRESULT SetMaskTop ([in] double top);
    HRESULT GetMaskBottom ([out] double* bottom);
    HRESULT SetMaskBottom ([in] double bottom);
    HRESULT GetMaskLeft ([out] double* left);
    HRESULT SetMaskLeft ([in] double left);
    HRESULT GetMaskRight ([out] double* right);
    HRESULT SetMaskRight ([in] double right);
    HRESULT ResetMask (void);
    HRESULT GetTransitionSelectionMask ([out] BMDSwitcherTransitionSelection* selectionMask);
    HRESULT AddCallback ([in] IBMDSwitcherKeyCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherKeyCallback* callback);
};

/* Interface IBMDSwitcherMediaPlayerCallback - Media Player Callback */

[
    object,
    uuid(3A82C121-18FA-469E-AE9A-73255356CA5B),
    helpstring("Media Player Callback")
] interface IBMDSwitcherMediaPlayerCallback : IUnknown
{
    HRESULT SourceChanged (void);
    HRESULT PlayingChanged (void);
    HRESULT LoopChanged (void);
    HRESULT AtBeginningChanged (void);
    HRESULT ClipFrameChanged (void);
};

/* Interface IBMDSwitcherMediaPlayer - Media Player */

[
    object,
    uuid(B5240E1F-CE0A-4C38-9FAB-D7FAC227205A),
    helpstring("Media Player")
] interface IBMDSwitcherMediaPlayer : IUnknown
{
    HRESULT GetSource ([out] BMDSwitcherMediaPlayerSourceType* type, [out] unsigned int* index);
    HRESULT SetSource ([in] BMDSwitcherMediaPlayerSourceType type, [in] unsigned int index);
    HRESULT GetPlaying ([out] BOOL* playing);
    HRESULT SetPlaying ([in] BOOL playing);
    HRESULT GetLoop ([out] BOOL* loop);
    HRESULT SetLoop ([in] BOOL loop);
    HRESULT GetAtBeginning ([out] BOOL* atBegining);
    HRESULT SetAtBeginning (void);
    HRESULT GetClipFrame ([out] unsigned int* clipFrameIndex);
    HRESULT SetClipFrame ([in] unsigned int clipFrameIndex);
    HRESULT AddCallback ([in] IBMDSwitcherMediaPlayerCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMediaPlayerCallback* callback);
};

/* Interface IBMDSwitcherTransitionMixParametersCallback - Transition Mix Parameters Callback */

[
    object,
    uuid(FE9730BB-F60B-46DF-B182-2992FFC884DE),
    helpstring("Transition Mix Parameters Callback")
] interface IBMDSwitcherTransitionMixParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherTransitionMixParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionMixParameters - Transition Mix Parameters */

[
    object,
    uuid(4C5D18C9-0955-4525-9947-527EA0679140),
    helpstring("Transition Mix Parameters")
] interface IBMDSwitcherTransitionMixParameters : IUnknown
{
    HRESULT GetRate ([out] unsigned int* frames);
    HRESULT SetRate ([in] unsigned int frames);
    HRESULT AddCallback ([in] IBMDSwitcherTransitionMixParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherTransitionMixParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionDipParametersCallback - Transition Dip Parameters Callback */

[
    object,
    uuid(410BE711-DB1A-48D1-93E7-382A0B1781B5),
    helpstring("Transition Dip Parameters Callback")
] interface IBMDSwitcherTransitionDipParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherTransitionDipParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionDipParameters - Transition Dip Parameters */

[
    object,
    uuid(DACC2FF3-6B54-4459-AAA6-2B1EA2D6887A),
    helpstring("Transition Dip Parameters")
] interface IBMDSwitcherTransitionDipParameters : IUnknown
{
    HRESULT GetRate ([out] unsigned int* frames);
    HRESULT SetRate ([in] unsigned int frames);
    HRESULT GetInputDip ([out] BMDSwitcherInputId* input);
    HRESULT SetInputDip ([in] BMDSwitcherInputId input);
    HRESULT AddCallback ([in] IBMDSwitcherTransitionDipParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherTransitionDipParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionWipeParametersCallback - Transition Wipe Parameters Callback */

[
    object,
    uuid(0FC4E095-DF7A-4128-933A-AAE4B7FD6119),
    helpstring("Transition Wipe Parameters Callback")
] interface IBMDSwitcherTransitionWipeParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherTransitionWipeParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionWipeParameters - Transition Wipe Parameters */

[
    object,
    uuid(FAC84D37-11A2-4152-8E5E-D9EB0DC48619),
    helpstring("Transition Wipe Parameters")
] interface IBMDSwitcherTransitionWipeParameters : IUnknown
{
    HRESULT GetRate ([out] unsigned int* frames);
    HRESULT SetRate ([in] unsigned int frames);
    HRESULT GetPattern ([out] BMDSwitcherPatternStyle* pattern);
    HRESULT SetPattern ([in] BMDSwitcherPatternStyle pattern);
    HRESULT GetBorderSize ([out] double* size);
    HRESULT SetBorderSize ([in] double size);
    HRESULT GetInputBorder ([out] BMDSwitcherInputId* input);
    HRESULT SetInputBorder ([in] BMDSwitcherInputId input);
    HRESULT GetSymmetry ([out] double* symmetry);
    HRESULT SetSymmetry ([in] double symmetry);
    HRESULT GetSoftness ([out] double* soft);
    HRESULT SetSoftness ([in] double soft);
    HRESULT GetHorizontalOffset ([out] double* hOffset);
    HRESULT SetHorizontalOffset ([in] double hOffset);
    HRESULT GetVerticalOffset ([out] double* vOffset);
    HRESULT SetVerticalOffset ([in] double vOffset);
    HRESULT GetReverse ([out] BOOL* reverse);
    HRESULT SetReverse ([in] BOOL reverse);
    HRESULT GetFlipFlop ([out] BOOL* flipflop);
    HRESULT SetFlipFlop ([in] BOOL flipflop);
    HRESULT AddCallback ([in] IBMDSwitcherTransitionWipeParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherTransitionWipeParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionDVEParametersCallback - Transition DVE Parameters Callback */

[
    object,
    uuid(6535115F-B64C-4512-BF5A-12969253E2F9),
    helpstring("Transition DVE Parameters Callback")
] interface IBMDSwitcherTransitionDVEParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherTransitionDVEParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionDVEParameters - Transition DVE Parameters */

[
    object,
    uuid(BAE4F4CE-3731-4D1F-846B-F2D81C06C3F4),
    helpstring("Transition DVE Parameters")
] interface IBMDSwitcherTransitionDVEParameters : IUnknown
{
    HRESULT GetRate ([out] unsigned int* frames);
    HRESULT SetRate ([in] unsigned int frames);
    HRESULT GetLogoRate ([out] unsigned int* frames);
    HRESULT SetLogoRate ([in] unsigned int frames);
    HRESULT GetReverse ([out] BOOL* reverse);
    HRESULT SetReverse ([in] BOOL reverse);
    HRESULT GetFlipFlop ([out] BOOL* flipflop);
    HRESULT SetFlipFlop ([in] BOOL flipflop);
    HRESULT GetStyle ([out] BMDSwitcherDVETransitionStyle* style);
    HRESULT SetStyle ([in] BMDSwitcherDVETransitionStyle style);
    HRESULT DoesSupportStyle ([in] BMDSwitcherDVETransitionStyle style, [out] BOOL* supported);
    HRESULT GetNumSupportedStyles ([out] unsigned int* numSupportedStyles);
    HRESULT GetSupportedStyles ([out] BMDSwitcherDVETransitionStyle* supportedStyles, [in] unsigned int supportedStylesMaxCount);
    HRESULT GetInputFill ([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill ([in] BMDSwitcherInputId input);
    HRESULT GetInputCut ([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut ([in] BMDSwitcherInputId input);
    HRESULT GetFillInputAvailabilityMask ([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetCutInputAvailabilityMask ([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetEnableKey ([out] BOOL* enableKey);
    HRESULT SetEnableKey ([in] BOOL enableKey);
    HRESULT GetPreMultiplied ([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied ([in] BOOL preMultiplied);
    HRESULT GetClip ([out] double* clip);
    HRESULT SetClip ([in] double clip);
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetInverse ([out] BOOL* inverse);
    HRESULT SetInverse ([in] BOOL inverse);
    HRESULT AddCallback ([in] IBMDSwitcherTransitionDVEParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherTransitionDVEParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionStingerParametersCallback - Transition Stinger Parameters Callback */

[
    object,
    uuid(9A8B3FB6-DD56-4DFF-AEB3-2C8A26585389),
    helpstring("Transition Stinger Parameters Callback")
] interface IBMDSwitcherTransitionStingerParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherTransitionStingerParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionStingerParameters - Transition Stinger Parameters */

[
    object,
    uuid(0F449A50-4083-49E8-BBF5-C3D95BFA1908),
    helpstring("Transition Stinger Parameters")
] interface IBMDSwitcherTransitionStingerParameters : IUnknown
{
    HRESULT GetSource ([out] BMDSwitcherStingerTransitionSource* src);
    HRESULT SetSource ([in] BMDSwitcherStingerTransitionSource src);
    HRESULT GetPreMultiplied ([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied ([in] BOOL preMultiplied);
    HRESULT GetClip ([out] double* clip);
    HRESULT SetClip ([in] double clip);
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetInverse ([out] BOOL* inverse);
    HRESULT SetInverse ([in] BOOL inverse);
    HRESULT GetPreroll ([out] unsigned int* frames);
    HRESULT SetPreroll ([in] unsigned int frames);
    HRESULT GetClipDuration ([out] unsigned int* frames);
    HRESULT SetClipDuration ([in] unsigned int frames);
    HRESULT GetTriggerPoint ([out] unsigned int* frames);
    HRESULT SetTriggerPoint ([in] unsigned int frames);
    HRESULT GetMixRate ([out] unsigned int* frames);
    HRESULT SetMixRate ([in] unsigned int frames);
    HRESULT AddCallback ([in] IBMDSwitcherTransitionStingerParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherTransitionStingerParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionParametersCallback - Transition Parameters Object Callback */

[
    object,
    uuid(DED1876A-38E3-418E-8044-F3C126C626E7),
    helpstring("Transition Parameters Object Callback")
] interface IBMDSwitcherTransitionParametersCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherTransitionParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionParameters - Transition Parameters Object */

[
    object,
    uuid(83755CE5-748B-4E49-A856-AC95B8CCD215),
    helpstring("Transition Parameters Object")
] interface IBMDSwitcherTransitionParameters : IUnknown
{
    HRESULT GetTransitionStyle ([out] BMDSwitcherTransitionStyle* style);
    HRESULT GetNextTransitionStyle ([out] BMDSwitcherTransitionStyle* style);
    HRESULT SetNextTransitionStyle ([in] BMDSwitcherTransitionStyle style);
    HRESULT GetTransitionSelection ([out] BMDSwitcherTransitionSelection* selection);
    HRESULT SetNextTransitionSelection ([in] BMDSwitcherTransitionSelection selection);
    HRESULT GetNextTransitionSelection ([out] BMDSwitcherTransitionSelection* selection);
    HRESULT AddCallback ([in] IBMDSwitcherTransitionParametersCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherTransitionParametersCallback* callback);
};

/* Interface IBMDSwitcherMixEffectBlockCallback - Mix Effect Block Notification Callback */

[
    object,
    uuid(5BC629A0-4271-4597-9E87-9B563F519238),
    helpstring("Mix Effect Block Notification Callback")
] interface IBMDSwitcherMixEffectBlockCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherMixEffectBlockEventType eventType);
};

/* Interface IBMDSwitcherMixEffectBlock - Mix Effect Block */

[
    object,
    uuid(6604B7AD-A814-46B2-8C69-C1C38815419A),
    helpstring("Mix Effect Block")
] interface IBMDSwitcherMixEffectBlock : IUnknown
{
    HRESULT GetProgramInput ([out] BMDSwitcherInputId* value);
    HRESULT SetProgramInput ([in] BMDSwitcherInputId value);
    HRESULT GetPreviewInput ([out] BMDSwitcherInputId* value);
    HRESULT SetPreviewInput ([in] BMDSwitcherInputId value);
    HRESULT GetPreviewLive ([out] BOOL* value);
    HRESULT GetPreviewTransition ([out] BOOL* value);
    HRESULT SetPreviewTransition ([in] BOOL value);
    HRESULT PerformAutoTransition (void);
    HRESULT PerformCut (void);
    HRESULT GetInTransition ([out] BOOL* value);
    HRESULT GetTransitionPosition ([out] double* value);
    HRESULT SetTransitionPosition ([in] double value);
    HRESULT GetTransitionFramesRemaining ([out] unsigned int* value);
    HRESULT PerformFadeToBlack (void);
    HRESULT GetFadeToBlackRate ([out] unsigned int* value);
    HRESULT SetFadeToBlackRate ([in] unsigned int value);
    HRESULT GetFadeToBlackFramesRemaining ([out] unsigned int* value);
    HRESULT GetFadeToBlackFullyBlack ([out] BOOL* value);
    HRESULT SetFadeToBlackFullyBlack ([in] BOOL value);
    HRESULT GetInFadeToBlack ([out] BOOL* value);
    HRESULT GetFadeToBlackInTransition ([out] BOOL* value);
    HRESULT GetInputAvailabilityMask ([out] BMDSwitcherInputAvailability* value);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherMixEffectBlockCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMixEffectBlockCallback* callback);
};

/* Interface IBMDSwitcherInputCallback - Switcher Input Object Callback */

[
    object,
    uuid(93054328-C4C8-402D-8899-8E1ED28FAC22),
    helpstring("Switcher Input Object Callback")
] interface IBMDSwitcherInputCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherInputEventType eventType);
};

/* Interface IBMDSwitcherInput - Switcher Input Object */

[
    object,
    uuid(0B182DF9-3732-4B1C-921B-C3B914AD441F),
    helpstring("Switcher Input Object")
] interface IBMDSwitcherInput : IUnknown
{
    HRESULT GetPortType ([out] BMDSwitcherPortType* type);
    HRESULT GetInputAvailability ([out] BMDSwitcherInputAvailability* availability);
    HRESULT SetShortName ([in] BSTR name);
    HRESULT GetShortName ([out] BSTR* name);
    HRESULT SetLongName ([in] BSTR name);
    HRESULT GetLongName ([out] BSTR* name);
    HRESULT AreNamesDefault ([in] BOOL* isDefault);
    HRESULT ResetNames (void);
    HRESULT IsProgramTallied ([out] BOOL* isTallied);
    HRESULT IsPreviewTallied ([out] BOOL* isTallied);
    HRESULT GetAvailableExternalPortTypes ([out] BMDSwitcherExternalPortType* types);
    HRESULT SetCurrentExternalPortType ([in] BMDSwitcherExternalPortType value);
    HRESULT GetCurrentExternalPortType ([out] BMDSwitcherExternalPortType* value);
    HRESULT GetInputId ([out] BMDSwitcherInputId* inputId);
    HRESULT AddCallback ([in] IBMDSwitcherInputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherInputCallback* callback);
};

/* Interface IBMDSwitcherInputColorCallback - Color Input Object Callback */

[
    object,
    uuid(BAE02C95-9394-439C-BE18-CEF0C0784EC3),
    helpstring("Color Input Object Callback")
] interface IBMDSwitcherInputColorCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherInputColorEventType eventType);
};

/* Interface IBMDSwitcherInputColor - Color Input Object */

[
    object,
    uuid(A0AF18D9-CBE6-49F3-B548-A44E856054D1),
    helpstring("Color Input Object")
] interface IBMDSwitcherInputColor : IUnknown
{
    HRESULT GetHue ([out] double* hue);
    HRESULT SetHue ([in] double hue);
    HRESULT GetSaturation ([out] double* sat);
    HRESULT SetSaturation ([in] double sat);
    HRESULT GetLuma ([out] double* luma);
    HRESULT SetLuma ([in] double luma);
    HRESULT AddCallback ([in] IBMDSwitcherInputColorCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherInputColorCallback* callback);
};

/* Interface IBMDSwitcherInputAuxCallback - Aux Input Object Callback */

[
    object,
    uuid(5AD1FF91-143F-49E9-9964-1B9FAF9A712A),
    helpstring("Aux Input Object Callback")
] interface IBMDSwitcherInputAuxCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherInputAuxEventType eventType);
};

/* Interface IBMDSwitcherInputAux - Aux Input Object */

[
    object,
    uuid(52C745A8-89B1-449A-A149-C43F5108DAE7),
    helpstring("Aux Input Object")
] interface IBMDSwitcherInputAux : IUnknown
{
    HRESULT GetInputSource ([out] BMDSwitcherInputId* input);
    HRESULT SetInputSource ([in] BMDSwitcherInputId input);
    HRESULT GetInputAvailabilityMask ([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT AddCallback ([in] IBMDSwitcherInputAuxCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherInputAuxCallback* callback);
};

/* Interface IBMDSwitcherSuperSourceBoxCallback - SuperSource Box Object Callback */

[
    object,
    uuid(7F667AF6-9B4E-4CDE-9F2F-2DF4505BF877),
    helpstring("SuperSource Box Object Callback")
] interface IBMDSwitcherSuperSourceBoxCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherSuperSourceBoxEventType eventType);
};

/* Interface IBMDSwitcherSuperSourceBox - SuperSource Box Object */

[
    object,
    uuid(137028E5-87B2-407E-846F-283B18C82CE9),
    helpstring("SuperSource Box Object")
] interface IBMDSwitcherSuperSourceBox : IUnknown
{
    HRESULT GetEnabled ([out] BOOL* enabled);
    HRESULT SetEnabled ([in] BOOL enabled);
    HRESULT GetInputSource ([out] BMDSwitcherInputId* input);
    HRESULT SetInputSource ([in] BMDSwitcherInputId input);
    HRESULT GetPositionX ([out] double* positionX);
    HRESULT SetPositionX ([in] double positionX);
    HRESULT GetPositionY ([out] double* positionY);
    HRESULT SetPositionY ([in] double positionY);
    HRESULT GetSize ([out] double* size);
    HRESULT SetSize ([in] double size);
    HRESULT GetCropped ([out] BOOL* cropped);
    HRESULT SetCropped ([in] BOOL cropped);
    HRESULT GetCropTop ([out] double* top);
    HRESULT SetCropTop ([in] double top);
    HRESULT GetCropBottom ([out] double* bottom);
    HRESULT SetCropBottom ([in] double bottom);
    HRESULT GetCropLeft ([out] double* left);
    HRESULT SetCropLeft ([in] double left);
    HRESULT GetCropRight ([out] double* right);
    HRESULT SetCropRight ([in] double right);
    HRESULT ResetCrop (void);
    HRESULT GetInputAvailabilityMask ([out] BMDSwitcherInputAvailability* mask);
    HRESULT AddCallback ([in] IBMDSwitcherSuperSourceBoxCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherSuperSourceBoxCallback* callback);
};

/* Interface IBMDSwitcherSuperSourceBorderCallback - SuperSource Border Object Callback */

[
    object,
    uuid(E6AC8639-5ACF-4E5B-B178-2BEF3EA490E7),
    helpstring("SuperSource Border Object Callback")
] interface IBMDSwitcherSuperSourceBorderCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherSuperSourceBorderEventType eventType);
};

/* Interface IBMDSwitcherSuperSourceBorder - SuperSource Border Object */

[
    object,
    uuid(4D082919-651E-40C7-BBA4-41D6107B7E97),
    helpstring("SuperSource Border Object")
] interface IBMDSwitcherSuperSourceBorder : IUnknown
{
    HRESULT GetBorderEnabled ([out] BOOL* enabled);
    HRESULT SetBorderEnabled ([in] BOOL enabled);
    HRESULT GetBorderBevel ([out] BMDSwitcherBorderBevelOption* bevelOption);
    HRESULT SetBorderBevel ([in] BMDSwitcherBorderBevelOption bevelOption);
    HRESULT GetBorderWidthOut ([out] double* widthOut);
    HRESULT SetBorderWidthOut ([in] double widthOut);
    HRESULT GetBorderWidthIn ([out] double* widthIn);
    HRESULT SetBorderWidthIn ([in] double widthIn);
    HRESULT GetBorderSoftnessOut ([out] double* softnessOut);
    HRESULT SetBorderSoftnessOut ([in] double softnessOut);
    HRESULT GetBorderSoftnessIn ([out] double* softnessIn);
    HRESULT SetBorderSoftnessIn ([in] double softnessIn);
    HRESULT GetBorderBevelSoftness ([out] double* bevelSoftness);
    HRESULT SetBorderBevelSoftness ([in] double bevelSoftness);
    HRESULT GetBorderBevelPosition ([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition ([in] double bevelPosition);
    HRESULT GetBorderHue ([out] double* hue /* [0, 360) */);
    HRESULT SetBorderHue ([in] double hue /* [0, 360) */);
    HRESULT GetBorderSaturation ([out] double* sat);
    HRESULT SetBorderSaturation ([in] double sat);
    HRESULT GetBorderLuma ([out] double* luma);
    HRESULT SetBorderLuma ([in] double luma);
    HRESULT GetBorderLightSourceDirection ([out] double* degrees);
    HRESULT SetBorderLightSourceDirection ([in] double degrees);
    HRESULT GetBorderLightSourceAltitude ([out] double* altitude);
    HRESULT SetBorderLightSourceAltitude ([in] double altitude);
    HRESULT AddCallback ([in] IBMDSwitcherSuperSourceBorderCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherSuperSourceBorderCallback* callback);
};

/* Interface IBMDSwitcherInputSuperSourceCallback - SuperSource Input Object Callback */

[
    object,
    uuid(161446A5-6F0C-4B45-A59B-AEF6CD0C4950),
    helpstring("SuperSource Input Object Callback")
] interface IBMDSwitcherInputSuperSourceCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherInputSuperSourceEventType eventType);
};

/* Interface IBMDSwitcherInputSuperSource - SuperSource Input Object */

[
    object,
    uuid(B97A1B97-69D0-457B-9580-92CCFE89FA4F),
    helpstring("SuperSource Input Object")
] interface IBMDSwitcherInputSuperSource : IUnknown
{
    HRESULT GetInputCut ([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut ([in] BMDSwitcherInputId input);
    HRESULT GetInputFill ([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill ([in] BMDSwitcherInputId input);
    HRESULT GetCutInputAvailabilityMask ([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetFillInputAvailabilityMask ([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetArtOption ([out] BMDSwitcherSuperSourceArtOption* artOption);
    HRESULT SetArtOption ([in] BMDSwitcherSuperSourceArtOption artOption);
    HRESULT GetPreMultiplied ([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied ([in] BOOL preMultiplied);
    HRESULT GetClip ([out] double* clip);
    HRESULT SetClip ([in] double clip);
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetInverse ([out] BOOL* inverse);
    HRESULT SetInverse ([in] BOOL inverse);
    HRESULT SupportsBorder ([out] BOOL* supportsBorder);
    HRESULT AddCallback ([in] IBMDSwitcherInputSuperSourceCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherInputSuperSourceCallback* callback);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
};

/* Interface IBMDSwitcherMultiViewCallback - MultiView Object Callback */

[
    object,
    uuid(345CE414-0BF1-46F9-97AC-FB1A47499005),
    helpstring("MultiView Object Callback")
] interface IBMDSwitcherMultiViewCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherMultiViewEventType eventType, [in] int window);
};

/* Interface IBMDSwitcherMultiView - MultiView Object */

[
    object,
    uuid(38EC859F-5EC6-4EDE-BDF5-1AAC9E63B1EB),
    helpstring("MultiView Object")
] interface IBMDSwitcherMultiView : IUnknown
{
    HRESULT CanChangeLayout ([out] BOOL* canChangeLayout);
    HRESULT GetLayout ([out] BMDSwitcherMultiViewLayout* layout);
    HRESULT SetLayout ([in] BMDSwitcherMultiViewLayout layout);
    HRESULT SupportsQuadrantLayout ([out] BOOL* supportsQuadrantLayout);
    HRESULT GetWindowInput ([in] unsigned int window, [out] BMDSwitcherInputId* input);
    HRESULT SetWindowInput ([in] unsigned int window, [in] BMDSwitcherInputId input);
    HRESULT GetWindowCount ([out] unsigned int* windowCount);
    HRESULT GetInputAvailabilityMask ([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT CanRouteInputs ([out] BOOL* canRoute);
    HRESULT SupportsVuMeters ([out] BOOL* supportsVuMeters);
    HRESULT CurrentInputSupportsVuMeter ([in] unsigned int window, [out] BOOL* supportsVuMeter);
    HRESULT GetVuMeterEnabled ([in] unsigned int window, [out] BOOL* enabled);
    HRESULT SetVuMeterEnabled ([in] unsigned int window, [in] BOOL enabled);
    HRESULT CanAdjustVuMeterOpacity ([out] BOOL* canAdjustVuMeterOpacity);
    HRESULT GetVuMeterOpacity ([out] double* opacity);
    HRESULT SetVuMeterOpacity ([in] double opacity);
    HRESULT CanToggleSafeAreaEnabled ([out] BOOL* canToggleSafeAreaEnabled);
    HRESULT CurrentInputSupportsSafeArea ([in] unsigned int window, [out] BOOL* supportsSafeArea);
    HRESULT GetSafeAreaEnabled ([in] unsigned int window, [out] BOOL* enabled);
    HRESULT SetSafeAreaEnabled ([in] unsigned int window, [in] BOOL enabled);
    HRESULT SupportsProgramPreviewSwap ([out] BOOL* supportsProgramPreviewSwap);
    HRESULT GetProgramPreviewSwapped ([out] BOOL* swapped);
    HRESULT SetProgramPreviewSwapped ([in] BOOL swapped);
    HRESULT AddCallback ([in] IBMDSwitcherMultiViewCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMultiViewCallback* callback);
};

/* Interface IBMDSwitcherDownstreamKeyCallback - Downstream Key Object Callback */

[
    object,
    uuid(0C7D4DE3-E7D1-4062-86B4-9F82F7BB346D),
    helpstring("Downstream Key Object Callback")
] interface IBMDSwitcherDownstreamKeyCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherDownstreamKeyEventType eventType);
};

/* Interface IBMDSwitcherDownstreamKey - Downstream Key Object */

[
    object,
    uuid(F54F9E1D-5EEE-40D2-A77A-85197A7D344E),
    helpstring("Downstream Key Object")
] interface IBMDSwitcherDownstreamKey : IUnknown
{
    HRESULT GetInputCut ([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut ([in] BMDSwitcherInputId input);
    HRESULT GetInputFill ([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill ([in] BMDSwitcherInputId input);
    HRESULT GetCutInputAvailabilityMask ([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT GetFillInputAvailabilityMask ([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT GetTie ([out] BOOL* tie);
    HRESULT SetTie ([in] BOOL tie);
    HRESULT GetRate ([out] unsigned int* frames);
    HRESULT SetRate ([in] unsigned int frames);
    HRESULT GetOnAir ([out] BOOL* onAir);
    HRESULT SetOnAir ([in] BOOL onAir);
    HRESULT PerformAutoTransition (void);
    HRESULT PerformAutoTransitionInDirection ([in] BOOL towardsOnAir);
    HRESULT IsTransitioning ([out] BOOL* isTransitioning);
    HRESULT IsAutoTransitioning ([out] BOOL* isAutoTransitioning);
    HRESULT IsTransitionTowardsOnAir ([out] BOOL* isTransitionTowardsOnAir);
    HRESULT GetFramesRemaining ([out] unsigned int* framesRemaining);
    HRESULT GetPreMultiplied ([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied ([in] BOOL preMultiplied);
    HRESULT GetClip ([out] double* clip);
    HRESULT SetClip ([in] double clip);
    HRESULT GetGain ([out] double* gain);
    HRESULT SetGain ([in] double gain);
    HRESULT GetInverse ([out] BOOL* inverse);
    HRESULT SetInverse ([in] BOOL inverse);
    HRESULT GetMasked ([out] BOOL* maskEnabled);
    HRESULT SetMasked ([in] BOOL maskEnabled);
    HRESULT GetMaskTop ([out] double* top);
    HRESULT SetMaskTop ([in] double top);
    HRESULT GetMaskBottom ([out] double* bottom);
    HRESULT SetMaskBottom ([in] double bottom);
    HRESULT GetMaskLeft ([out] double* left);
    HRESULT SetMaskLeft ([in] double left);
    HRESULT GetMaskRight ([out] double* right);
    HRESULT SetMaskRight ([in] double right);
    HRESULT ResetMask (void);
    HRESULT AddCallback ([in] IBMDSwitcherDownstreamKeyCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherDownstreamKeyCallback* callback);
};

/* Interface IBMDSwitcherInputIterator - Input Iterator */

[
    object,
    uuid(275E9888-2F65-4B2E-9434-1937A72B9EC4),
    helpstring("Input Iterator")
] interface IBMDSwitcherInputIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherInput** input);
    HRESULT GetById ([in] BMDSwitcherInputId inputId, [out] IBMDSwitcherInput** input);
};

/* Interface IBMDSwitcherSuperSourceBoxIterator - SuperSource Box Iterator */

[
    object,
    uuid(96153CDA-C894-42EA-BA90-C387018CC334),
    helpstring("SuperSource Box Iterator")
] interface IBMDSwitcherSuperSourceBoxIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherSuperSourceBox** box);
};

/* Interface IBMDSwitcherMixEffectBlockIterator - Mix Effect Block Iterator */

[
    object,
    uuid(EA8D1E06-4A59-47EF-AF68-C7F074A35FE9),
    helpstring("Mix Effect Block Iterator")
] interface IBMDSwitcherMixEffectBlockIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherMixEffectBlock** mixEffectBlock);
};

/* Interface IBMDSwitcherDownstreamKeyIterator - Downstream Key Iterator */

[
    object,
    uuid(AF65039F-C4D0-4C85-8CB0-AE060EDDC0B9),
    helpstring("Downstream Key Iterator")
] interface IBMDSwitcherDownstreamKeyIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherDownstreamKey** downstreamKey);
};

/* Interface IBMDSwitcherKeyIterator - Key Iterator */

[
    object,
    uuid(63032A58-35FC-4AE3-86E3-49DFF879EA4A),
    helpstring("Key Iterator")
] interface IBMDSwitcherKeyIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherKey** key);
};

/* Interface IBMDSwitcherMediaPlayerIterator - Media Player Iterator */

[
    object,
    uuid(E910816F-59CB-4224-A77F-06DE3D232275),
    helpstring("Media Player Iterator")
] interface IBMDSwitcherMediaPlayerIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherMediaPlayer** mediaPlayer);
};

/* Interface IBMDSwitcherMultiViewIterator - MultiView Iterator */

[
    object,
    uuid(B731477F-A85D-4003-9A89-9606309F3D34),
    helpstring("MultiView Iterator")
] interface IBMDSwitcherMultiViewIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherMultiView** multiView);
};

/* Interface IBMDSwitcherAudioMonitorOutputIterator - Audio Monitor Output Iterator */

[
    object,
    uuid(C76BAC6A-DFEE-4F2F-B161-226B481D556A),
    helpstring("Audio Monitor Output Iterator")
] interface IBMDSwitcherAudioMonitorOutputIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherAudioMonitorOutput** audioMonitorOutput);
};

/* Interface IBMDSwitcherAudioHeadphoneOutputIterator - Audio Headphone Output Iterator */

[
    object,
    uuid(151CFF07-EF32-441F-8FF8-C2163A751EA2),
    helpstring("Audio Headphone Output Iterator")
] interface IBMDSwitcherAudioHeadphoneOutputIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherAudioHeadphoneOutput** audioHeadphoneOutput);
};

/* Interface IBMDSwitcherAudioInputIterator - Audio Input Iterator */

[
    object,
    uuid(97959903-651E-4F68-BA42-1FA61508F189),
    helpstring("Audio Input Iterator")
] interface IBMDSwitcherAudioInputIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherAudioInput** audioInput);
    HRESULT GetById ([in] BMDSwitcherAudioInputId audioInputId, [out] IBMDSwitcherAudioInput** audioInput);
};

/* Interface IBMDSwitcherSerialPortIterator - Serial Port Iterator */

[
    object,
    uuid(E3F0E3CE-5A1A-4D60-94A4-D3DBB2514763),
    helpstring("Serial Port Iterator")
] interface IBMDSwitcherSerialPortIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherSerialPort** serialPort);
};

/* Interface IBMDSwitcherHyperDeckIterator - HyperDeck Iterator */

[
    object,
    uuid(35879F23-168D-4AF2-80B0-6D72838E17F9),
    helpstring("HyperDeck Iterator")
] interface IBMDSwitcherHyperDeckIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherHyperDeck** hyperDeck);
    HRESULT GetById ([in] BMDSwitcherHyperDeckId hyperDeckId, [out] IBMDSwitcherHyperDeck** hyperDeck);
};

/* Interface IBMDSwitcherMixMinusOutputIterator - Mix-Minus Output Iterator */

[
    object,
    uuid(7EE8380F-2A09-4085-86BC-DFB8ACACE0FB),
    helpstring("Mix-Minus Output Iterator")
] interface IBMDSwitcherMixMinusOutputIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherMixMinusOutput** mixMinusOutput);
};

/* Interface IBMDSwitcherTalkbackIterator - Talkback Iterator */

[
    object,
    uuid(17AC2EFF-C51A-41AB-A4CB-3C3AF2157FFE),
    helpstring("Talkback Iterator")
] interface IBMDSwitcherTalkbackIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherTalkback** talkback);
    HRESULT GetById ([in] BMDSwitcherTalkbackId talkbackId, [out] IBMDSwitcherTalkback** talkback);
};

/* Interface IBMDSwitcherCallback - Switcher Callback Delegate */

[
    object,
    uuid(EE50FC2C-D0D7-42D6-965A-57498CECC1F6),
    helpstring("Switcher Callback Delegate")
] interface IBMDSwitcherCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherEventType eventType, [in] BMDSwitcherVideoMode coreVideoMode);
};

/* Interface IBMDSwitcher - Switcher Object */

[
    object,
    uuid(00E7C247-9504-452B-AC97-F56EC3A180DE),
    helpstring("Switcher Object")
] interface IBMDSwitcher : IUnknown
{
    HRESULT GetProductName ([out] BSTR* productName);
    HRESULT GetVideoMode ([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode ([in] BMDSwitcherVideoMode videoMode);
    HRESULT DoesSupportVideoMode ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT DoesVideoModeChangeRequireReconfiguration ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* required);
    HRESULT GetMethodForDownConvertedSD ([out] BMDSwitcherDownConversionMethod* method);
    HRESULT SetMethodForDownConvertedSD ([in] BMDSwitcherDownConversionMethod method);
    HRESULT GetDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* downConvertedHDVideoMode);
    HRESULT SetDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode);
    HRESULT DoesSupportDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode, [out] BOOL* supported);
    HRESULT GetMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* multiviewVideoMode);
    HRESULT SetMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode);
    HRESULT DoesSupportMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode, [out] BOOL* supported);
    HRESULT Get3GSDIOutputLevel ([out] BMDSwitcher3GSDIOutputLevel* outputLevel);
    HRESULT Set3GSDIOutputLevel ([in] BMDSwitcher3GSDIOutputLevel outputLevel);
    HRESULT GetPowerStatus ([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT GetTimeCode ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT SetTimeCode ([in] unsigned char hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT RequestTimeCode (void);
    HRESULT GetTimeCodeLocked ([out] BOOL* timeCodeLocked);
    HRESULT GetTimeCodeMode ([out] BMDSwitcherTimeCodeMode* timeCodeMode);
    HRESULT SetTimeCodeMode ([in] BMDSwitcherTimeCodeMode timeCodeMode);
    HRESULT GetAreOutputsConfigurable ([out] BOOL* configurable);
    HRESULT GetSuperSourceCascade ([out] BOOL* cascade);
    HRESULT SetSuperSourceCascade ([in] BOOL cascade);
    HRESULT SuspendStreaming ([in] unsigned int durationMs);
    HRESULT AllowStreamingToResume (void);
    HRESULT DoesSupportAutoVideoMode ([out] BOOL* supported);
    HRESULT GetAutoVideoMode ([out] BOOL* enabled);
    HRESULT GetAutoVideoModeDetected ([out] BOOL* detected);
    HRESULT SetAutoVideoMode ([in] BOOL enabled);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherCallback* callback);
};

/* Interface IBMDSwitcherDiscovery - Used to discover and connect to switchers */

[
    object,
    uuid(1BE1FC40-E404-48C5-BAB6-535D27D8AF88),
    helpstring("Used to discover and connect to switchers")
] interface IBMDSwitcherDiscovery : IUnknown
{
    HRESULT ConnectTo ([in] BSTR deviceAddress, [out] IBMDSwitcher** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

/* Interface IBMDSwitcherFrame - Frame */

[
    object,
    uuid(35A1F6A6-D317-4F89-A565-0F0BD414CF77),
    helpstring("Frame")
] interface IBMDSwitcherFrame : IUnknown
{
    int GetWidth (void);
    int GetHeight (void);
    int GetRowBytes (void);
    BMDSwitcherPixelFormat GetPixelFormat (void);
    HRESULT GetBytes ([out] void** buffer);
};

/* Interface IBMDSwitcherAudio - Audio */

[
    object,
    uuid(E89BD25E-FD04-4FBE-A124-CCAF5ADBE5B2),
    helpstring("Audio")
] interface IBMDSwitcherAudio : IUnknown
{
    int GetSize (void);
    HRESULT GetBytes ([out] void** buffer);
};

/* Interface IBMDSwitcherLockCallback - Lock Callback Delegate */

[
    object,
    uuid(56663D7A-85A8-4DA0-9B13-2A52D3C7740C),
    helpstring("Lock Callback Delegate")
] interface IBMDSwitcherLockCallback : IUnknown
{
    HRESULT Obtained (void);
};

/* Interface IBMDSwitcherStillsCallback - Stills Callback Delegate */

[
    object,
    uuid(7AF82DC6-9A43-4CD2-9712-585E6BA159BA),
    helpstring("Stills Callback Delegate")
] interface IBMDSwitcherStillsCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherMediaPoolEventType eventType, [in] IBMDSwitcherFrame* frame, [in] int index);
};

/* Interface IBMDSwitcherStills - Stills */

[
    object,
    uuid(235C654C-7389-4D3E-AB46-D0078D065940),
    helpstring("Stills")
] interface IBMDSwitcherStills : IUnknown
{
    HRESULT GetCount ([out] unsigned int* count);
    HRESULT IsValid ([in] unsigned int index, [out] BOOL* valid);
    HRESULT GetName ([in] unsigned int index, [out] BSTR* name);
    HRESULT SetName ([in] unsigned int index, [in] BSTR name);
    HRESULT GetHash ([in] unsigned int index, [out] BMDSwitcherHash* hash);
    HRESULT SetInvalid ([in] unsigned int index);
    HRESULT Lock ([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Unlock ([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Upload ([in] unsigned int index, [in] BSTR name, [in] IBMDSwitcherFrame* frame);
    HRESULT Download ([in] unsigned int index);
    HRESULT CancelTransfer (void);
    HRESULT GetProgress ([out] double* progress);
    HRESULT AddCallback ([in] IBMDSwitcherStillsCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherStillsCallback* callback);
};

/* Interface IBMDSwitcherClipCallback - Clip Callback Delegate */

[
    object,
    uuid(407117B4-B6A8-46D2-9911-43254171B1B7),
    helpstring("Clip Callback Delegate")
] interface IBMDSwitcherClipCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherMediaPoolEventType eventType, [in] IBMDSwitcherFrame* frame, [in] int frameIndex, [in] IBMDSwitcherAudio* audio, [in] int clipIndex);
};

/* Interface IBMDSwitcherClip - Clip */

[
    object,
    uuid(94AAF18A-7AF4-4721-8C1E-1843D42644E7),
    helpstring("Clip")
] interface IBMDSwitcherClip : IUnknown
{
    HRESULT GetIndex ([out] unsigned int* index);
    HRESULT IsValid ([out] BOOL* valid);
    HRESULT GetName ([out] BSTR* name);
    HRESULT SetName ([in] BSTR name);
    HRESULT SetValid ([in] BSTR name, [in] unsigned int frameCount);
    HRESULT SetInvalid (void);
    HRESULT GetFrameCount ([out] unsigned int* frameCount);
    HRESULT GetMaxFrameCount ([out] unsigned int* maxFrameCount);
    HRESULT IsFrameValid ([in] unsigned int frameIndex, [out] BOOL* valid);
    HRESULT GetFrameHash ([in] unsigned int frameIndex, [out] BMDSwitcherHash* hash);
    HRESULT IsAudioValid ([out] BOOL* valid);
    HRESULT GetAudioName ([out] BSTR* name);
    HRESULT SetAudioName ([in] BSTR name);
    HRESULT GetAudioHash ([out] BMDSwitcherHash* hash);
    HRESULT SetAudioInvalid (void);
    HRESULT Lock ([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Unlock ([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT UploadFrame ([in] unsigned int frameIndex, [in] IBMDSwitcherFrame* frame);
    HRESULT DownloadFrame ([in] unsigned int frameIndex);
    HRESULT UploadAudio ([in] BSTR name, [in] IBMDSwitcherAudio* audio);
    HRESULT DownloadAudio (void);
    HRESULT CancelTransfer (void);
    HRESULT GetProgress ([out] double* progress);
    HRESULT AddCallback ([in] IBMDSwitcherClipCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherClipCallback* callback);
};

/* Interface IBMDSwitcherMediaPoolCallback - Media Pool Callback Delegate */

[
    object,
    uuid(B8617A16-1B17-4FD6-93BF-664FA71F2A50),
    helpstring("Media Pool Callback Delegate")
] interface IBMDSwitcherMediaPoolCallback : IUnknown
{
    HRESULT ClipFrameMaxCountsChanged (void);
    HRESULT FrameTotalForClipsChanged (void);
};

/* Interface IBMDSwitcherMediaPool - Frame Pool for Media Players */

[
    object,
    uuid(33D14916-8E2C-46CC-A63B-2C9213A572C1),
    helpstring("Frame Pool for Media Players")
] interface IBMDSwitcherMediaPool : IUnknown
{
    HRESULT GetStills ([out] IBMDSwitcherStills** stills);
    HRESULT GetClip ([in] unsigned int clipIndex, [out] IBMDSwitcherClip** clip);
    HRESULT GetClipCount ([out] unsigned int* clipCount);
    HRESULT CreateFrame ([in] BMDSwitcherPixelFormat pixelFormat, [in] unsigned int width, [in] unsigned int height, [out] IBMDSwitcherFrame** frame);
    HRESULT CreateAudio ([in] unsigned int sizeBytes, [out] IBMDSwitcherAudio** audio);
    HRESULT GetFrameTotalForClips ([out] unsigned int* total);
    HRESULT GetClipMaxFrameCounts ([in] unsigned int clipCount, [out] unsigned int* clipMaxFrameCounts);	// one array element per clip, each element holds the maximum frame count
    HRESULT SetClipMaxFrameCounts ([in] unsigned int clipCount, [in] const unsigned int* clipMaxFrameCounts);	// one array element per clip, each element holds the maximum frame count
    HRESULT Clear (void);	// clears all stills, clips and clip audio
    HRESULT DoesVideoModeChangeClearMediaPool ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* clear);
    HRESULT AddCallback ([in] IBMDSwitcherMediaPoolCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMediaPoolCallback* callback);
};

/* Interface IBMDSwitcherStillCapture - Still Capture Object */

[
    object,
    uuid(CC762E9E-5074-4B64-BC76-848E2C4E7421),
    helpstring("Still Capture Object")
] interface IBMDSwitcherStillCapture : IUnknown
{
    HRESULT IsAvailable ([out] BOOL* available);
    HRESULT CaptureStill (void);
    HRESULT AddCallback ([in] IBMDSwitcherStillCaptureCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherStillCaptureCallback* callback);
};

/* Interface IBMDSwitcherStillCaptureCallback - Still Capture Callback Delegate */

[
    object,
    uuid(56AB0A02-9706-417C-85F4-584C275F9DEA),
    helpstring("Still Capture Callback Delegate")
] interface IBMDSwitcherStillCaptureCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherStillCaptureEventType eventType);
};

/* Interface IBMDSwitcherSaveRecall - Switcher Save Recall Object */

[
    object,
    uuid(7C8B477A-6BE3-4E85-B8EE-BE58BEC28958),
    helpstring("Switcher Save Recall Object")
] interface IBMDSwitcherSaveRecall : IUnknown
{
    HRESULT Save ([in] BMDSwitcherSaveRecallType type);
    HRESULT Clear ([in] BMDSwitcherSaveRecallType type);
};

/* Interface IBMDSwitcherRecordDiskIterator - RecordDisk Iterator */

[
    object,
    uuid(777B5A46-83EF-4615-9722-146C79436927),
    helpstring("RecordDisk Iterator")
] interface IBMDSwitcherRecordDiskIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherRecordDisk** recordDisk);
    HRESULT GetById ([in] BMDSwitcherRecordDiskId diskId, [out] IBMDSwitcherRecordDisk** disk);
};

/* Interface IBMDSwitcherRecordDisk - Switcher RecordDisk Object */

[
    object,
    uuid(2F2046BD-E6FC-4CC0-8689-94454F027997),
    helpstring("Switcher RecordDisk Object")
] interface IBMDSwitcherRecordDisk : IUnknown
{
    HRESULT GetId ([out] BMDSwitcherRecordDiskId* diskId);
    HRESULT GetVolumeName ([out] BSTR* volumeName);
    HRESULT GetRecordingTimeAvailable ([out] unsigned int* recordingTimeAvailable);
    HRESULT GetStatus ([out] BMDSwitcherRecordDiskStatus* diskStatus);
    HRESULT AddCallback ([in] IBMDSwitcherRecordDiskCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherRecordDiskCallback* callback);
};

/* Interface IBMDSwitcherRecordDiskCallback - RecordDisk Callback Delegate */

[
    object,
    uuid(B83041FC-3091-472B-B6A3-9D753692BF29),
    helpstring("RecordDisk Callback Delegate")
] interface IBMDSwitcherRecordDiskCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherRecordDiskEventType eventType, [in] BMDSwitcherRecordDiskId diskId);
};

/* Interface IBMDSwitcherRecordAV - Switcher RecordAV Object */

[
    object,
    uuid(43C5A333-3DF4-4DF2-8F81-0A994CE63315),
    helpstring("Switcher RecordAV Object")
] interface IBMDSwitcherRecordAV : IUnknown
{
    HRESULT StartRecording (void);
    HRESULT StopRecording (void);
    HRESULT SwitchDisk (void);
    HRESULT IsRecording ([out] BOOL* recording);
    HRESULT GetStatus ([out] BMDSwitcherRecordAVState* state, [out] BMDSwitcherRecordAVError* error);
    HRESULT SetFilename ([in] BSTR filename);
    HRESULT GetFilename ([out] BSTR* filename);
    HRESULT SetRecordInAllCameras ([in] BOOL recordInAllCameras);
    HRESULT GetRecordInAllCameras ([out] BOOL* recordInAllCameras);
    HRESULT DoesSupportISORecording ([out] BOOL* supportsISORecording);
    HRESULT SetRecordAllISOInputs ([in] BOOL recordAllISOInputs);
    HRESULT GetRecordAllISOInputs ([out] BOOL* recordAllISOInputs);
    HRESULT GetWorkingSetLimit ([out] unsigned int* workingSetLimit);
    HRESULT SetWorkingSetDisk ([in] unsigned int workingSetIndex, [in] BMDSwitcherRecordDiskId diskId);
    HRESULT GetWorkingSetDisk ([in] unsigned int workingSetIndex, [out] BMDSwitcherRecordDiskId* diskId);
    HRESULT GetActiveDiskIndex ([out] unsigned int* workingSetIndex);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetTotalRecordingTimeAvailable ([out] unsigned int* totalRecordingTimeAvailable);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherRecordAVCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherRecordAVCallback* callback);
};

/* Interface IBMDSwitcherRecordAVCallback - RecordAV Callback Delegate */

[
    object,
    uuid(0DD309AE-D406-460D-B4AA-4D9EF2D31DE2),
    helpstring("RecordAV Callback Delegate")
] interface IBMDSwitcherRecordAVCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherRecordAVEventType eventType);
    HRESULT NotifyWorkingSetChange ([in] unsigned int workingSetIndex, [in] BMDSwitcherRecordDiskId diskId);
    HRESULT NotifyDiskAvailability ([in] BMDSwitcherRecordDiskAvailabilityEventType eventType, [in] BMDSwitcherRecordDiskId diskId);
    HRESULT NotifyStatus ([in] BMDSwitcherRecordAVState stateType, [in] BMDSwitcherRecordAVError error);
};

/* Interface IBMDSwitcherStreamRTMP - Switcher Stream RTMP Object */

[
    object,
    uuid(89A72582-A54B-40B6-9CFB-9B750D6C5DD9),
    helpstring("Switcher Stream RTMP Object")
] interface IBMDSwitcherStreamRTMP : IUnknown
{
    HRESULT StartStreaming (void);
    HRESULT StopStreaming (void);
    HRESULT IsStreaming ([out] BOOL* streaming);
    HRESULT GetStatus ([out] BMDSwitcherStreamRTMPState* state, [out] BMDSwitcherStreamRTMPError* error);
    HRESULT SetServiceName ([in] BSTR serviceName);
    HRESULT GetServiceName ([out] BSTR* serviceName);
    HRESULT SetUrl ([in] BSTR url);
    HRESULT GetUrl ([out] BSTR* url);
    HRESULT SetKey ([in] BSTR url);
    HRESULT GetKey ([out] BSTR* key);
    HRESULT SetVideoBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetVideoBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT SetAudioBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetAudioBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetEncodingBitrate ([out] unsigned int* encodingBitrate);
    HRESULT GetCacheUsed ([out] double* cacheUsed);
    HRESULT SetAuthentication ([in] BSTR username, [in] BSTR password);
    HRESULT GetAuthentication ([out] BSTR* username, [out] BSTR* password);
    HRESULT SetLowLatency ([in] BOOL lowLatency);
    HRESULT GetLowLatency ([out] BOOL* lowLatency);
    HRESULT AddCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
};

/* Interface IBMDSwitcherStreamRTMPCallback - Stream RTMP Callback Delegate */

[
    object,
    uuid(0A7F37FF-3195-4EF2-82C9-AA3751906059),
    helpstring("Stream RTMP Callback Delegate")
] interface IBMDSwitcherStreamRTMPCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherStreamRTMPEventType eventType);
    HRESULT NotifyStatus ([in] BMDSwitcherStreamRTMPState stateType, [in] BMDSwitcherStreamRTMPError error);
};

/* Interface IBMDSwitcherCameraControlParameterIterator - Camera Control Parameter Iterator */

[
    object,
    uuid(6B6E289F-0847-480A-A0BD-E8FB78A5505A),
    helpstring("Camera Control Parameter Iterator")
] interface IBMDSwitcherCameraControlParameterIterator : IUnknown
{
    HRESULT Next ([out] unsigned int* destinationDevice, [out] unsigned int* category, [out] unsigned int* parameter);
};

/* Interface IBMDSwitcherCameraControlCallback - Switcher Camera Control Callback Delegate */

[
    object,
    uuid(90337CAC-9376-4A62-A58F-10936130970B),
    helpstring("Switcher Camera Control Callback Delegate")
] interface IBMDSwitcherCameraControlCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherCameraControlEventType eventType, [in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter);
};

/* Interface IBMDSwitcherCameraControl - Switcher Camera Control Object */

[
    object,
    uuid(889111CC-02CA-4268-ADD1-569166F0F0D9),
    helpstring("Switcher Camera Control Object")
] interface IBMDSwitcherCameraControl : IUnknown
{
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetPeriodicFlushInterval ([out] unsigned int* intervalMs /* In milliseconds */);
    HRESULT SetPeriodicFlushInterval ([in] unsigned int intervalMs /* In milliseconds */);
    HRESULT GetParameterInfo ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [out] BMDSwitcherCameraControlParameterType* type, [out] unsigned int* count);
    HRESULT GetParameterPeriodicFlushEnabled ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [out] BOOL* enabled);
    HRESULT SetParameterPeriodicFlushEnabled ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] BOOL enabled);
    HRESULT SetFlags ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const BOOL* values);
    HRESULT ToggleFlags ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const BOOL* values);
    HRESULT GetFlags ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] BOOL* values);
    HRESULT SetInt8s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const signed char* values);
    HRESULT OffsetInt8s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const signed char* values);
    HRESULT GetInt8s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] signed char* values);
    HRESULT SetInt16s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const short* values);
    HRESULT OffsetInt16s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const short* values);
    HRESULT GetInt16s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] short* values);
    HRESULT SetInt32s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const int* values);
    HRESULT OffsetInt32s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const int* values);
    HRESULT GetInt32s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] int* values);
    HRESULT SetInt64s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const long long* values);
    HRESULT OffsetInt64s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const long long* values);
    HRESULT GetInt64s ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] long long* values);
    HRESULT SetString ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] BSTR value);
    HRESULT GetString ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [out] BSTR* value);
    HRESULT OffsetFloats ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const double* values);
    HRESULT SetFloats ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const double* values);
    HRESULT GetFloats ([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] double* values);
    HRESULT AddCallback ([in] IBMDSwitcherCameraControlCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherCameraControlCallback* callback);
};

/* Interface IBMDSwitcherMacro - Macro */

[
    object,
    uuid(2F1DF648-CB02-48D5-B5EB-B857BBD626A7),
    helpstring("Macro")
] interface IBMDSwitcherMacro : IUnknown
{
    int GetSize (void);
    HRESULT GetBytes ([out] void** buffer);
};

/* Interface IBMDSwitcherTransferMacro - MacroTransfer */

[
    object,
    uuid(9BAD28DB-F0CC-4696-82EE-B1E3E5A7C129),
    helpstring("MacroTransfer")
] interface IBMDSwitcherTransferMacro : IUnknown
{
    HRESULT Cancel (void);
    HRESULT GetProgress ([out] double* progress);
    HRESULT GetMacro ([out] IBMDSwitcherMacro** macro);
};

/* Interface IBMDSwitcherMacroPoolCallback - Macro Pool Callback Delegate */

[
    object,
    uuid(E29294A0-FB4C-418D-9AE1-C6CBA288104F),
    helpstring("Macro Pool Callback Delegate")
] interface IBMDSwitcherMacroPoolCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherMacroPoolEventType eventType, [in] unsigned int index, [in] IBMDSwitcherTransferMacro* macroTransfer);
};

/* Interface IBMDSwitcherMacroPool - Management of Macros */

[
    object,
    uuid(5FA28BFC-7934-42F4-BED8-8744D62D210F),
    helpstring("Management of Macros")
] interface IBMDSwitcherMacroPool : IUnknown
{
    HRESULT GetMaxCount ([out] unsigned int* maxCount);	// Returns the maximum number of macros that can be stored
    HRESULT Delete ([in] unsigned int index);	// Delete a macro
    HRESULT IsValid ([in] unsigned int index, [out] BOOL* valid);	// Returns whether the specified macro is valid
    HRESULT HasUnsupportedOps ([in] unsigned int index, [out] BOOL* hasUnsupportedOps);	// Returns whether the specified macro has any unsupported or invalid operations
    HRESULT GetName ([in] unsigned int index, [out] BSTR* name);	// Macro's name
    HRESULT SetName ([in] unsigned int index, [in] BSTR name);
    HRESULT GetDescription ([in] unsigned int index, [out] BSTR* description);	// Macro's description property
    HRESULT SetDescription ([in] unsigned int index, [in] BSTR description);
    HRESULT CreateMacro ([in] unsigned int sizeBytes, [out] IBMDSwitcherMacro** macro);
    HRESULT Upload ([in] unsigned int index, [in] BSTR name, [in] BSTR description, [in] IBMDSwitcherMacro* macro, [out] IBMDSwitcherTransferMacro** macroTransfer);
    HRESULT Download ([in] unsigned int index, [out] IBMDSwitcherTransferMacro** macroTransfer);
    HRESULT AddCallback ([in] IBMDSwitcherMacroPoolCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMacroPoolCallback* callback);
};

/* Interface IBMDSwitcherMacroControlCallback - Macro Control Callback Delegate */

[
    object,
    uuid(F6A62317-60F6-4D5C-A5DD-2DC372B9F4FF),
    helpstring("Macro Control Callback Delegate")
] interface IBMDSwitcherMacroControlCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherMacroControlEventType eventType);
};

/* Interface IBMDSwitcherMacroControl - Recording and Playback of Macros */

[
    object,
    uuid(2E23E657-A7F0-4C4A-BCBE-4B8D3DD061AC),
    helpstring("Recording and Playback of Macros")
] interface IBMDSwitcherMacroControl : IUnknown
{
    HRESULT Run ([in] unsigned int index);	// Begin running a macro
    HRESULT GetLoop ([out] BOOL* loop);
    HRESULT SetLoop ([in] BOOL loop);
    HRESULT ResumeRunning (void);	// Resume execution of the currently running macro that is waiting for the user to continue
    HRESULT StopRunning (void);	// Terminate execution of the currently running macro
    HRESULT Record ([in] unsigned int index, [in] BSTR name, [in] BSTR description);	// Start recording a new macro
    HRESULT RecordUserWait (void);	// Insert a user wait event into the currently recording macro
    HRESULT RecordPause ([in] unsigned int frames);	// Insert a frame delay into currently recording macro
    HRESULT StopRecording (void);	// Stop recording and save the current macro
    HRESULT GetRunStatus ([out] BMDSwitcherMacroRunStatus* status, [out] BOOL* loop, [out] unsigned int* index);	// Get the current macro running status
    HRESULT GetRecordStatus ([out] BMDSwitcherMacroRecordStatus* status, [out] unsigned int* index);	// Get the current macro recording status
    HRESULT AddCallback ([in] IBMDSwitcherMacroControlCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMacroControlCallback* callback);
};

/* Interface IBMDSwitcherSerialPortCallback - Serial Port Object Callback */

[
    object,
    uuid(9CEBFC3C-77DF-45AC-A1B2-A9A6DF6ACE42),
    helpstring("Serial Port Object Callback")
] interface IBMDSwitcherSerialPortCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherSerialPortEventType eventType);
};

/* Interface IBMDSwitcherSerialPort - Serial Port */

[
    object,
    uuid(14BEA77D-3F69-4FBF-A331-F5EA9FF6A42E),
    helpstring("Serial Port")
] interface IBMDSwitcherSerialPort : IUnknown
{
    HRESULT SetFunction ([in] BMDSwitcherSerialPortFunction function);
    HRESULT GetFunction ([out] BMDSwitcherSerialPortFunction* function);
    HRESULT DoesSupportFunction ([in] BMDSwitcherSerialPortFunction function, [out] BOOL* supported);
    HRESULT AddCallback ([in] IBMDSwitcherSerialPortCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherSerialPortCallback* callback);
};

/* Interface IBMDSwitcherHyperDeckClipCallback - HyperDeck Clip Callback Delegate */

[
    object,
    uuid(473830E4-53D9-4924-9DC1-0FC0239EDBE9),
    helpstring("HyperDeck Clip Callback Delegate")
] interface IBMDSwitcherHyperDeckClipCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherHyperDeckClipEventType eventType, [in] BMDSwitcherHyperDeckClipId clipId);
};

/* Interface IBMDSwitcherHyperDeckClip - Clip */

[
    object,
    uuid(DFBE7482-B24A-4BF1-92AD-7EAF1F5F2AE8),
    helpstring("Clip")
] interface IBMDSwitcherHyperDeckClip : IUnknown
{
    HRESULT IsValid ([out] BOOL* valid);
    HRESULT IsInfoAvailable ([out] BOOL* infoAvailable);
    HRESULT GetId ([out] BMDSwitcherHyperDeckClipId* clipId);
    HRESULT GetName ([out] BSTR* name);
    HRESULT GetDuration ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT GetTimelineStart ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT GetTimelineEnd ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT AddCallback ([in] IBMDSwitcherHyperDeckClipCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherHyperDeckClipCallback* callback);
};

/* Interface IBMDSwitcherHyperDeckClipIterator - HyperDeck Clip Iterator */

[
    object,
    uuid(162A6BFE-8290-4EAC-95E4-BA109D7BA4EC),
    helpstring("HyperDeck Clip Iterator")
] interface IBMDSwitcherHyperDeckClipIterator : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherHyperDeckClip** clip);
    HRESULT GetById ([in] BMDSwitcherHyperDeckClipId clipId, [out] IBMDSwitcherHyperDeckClip** clip);
};

/* Interface IBMDSwitcherHyperDeckCallback - HyperDeck Callback Delegate */

[
    object,
    uuid(F745EBDF-F868-4787-B2D4-50064A5D6597),
    helpstring("HyperDeck Callback Delegate")
] interface IBMDSwitcherHyperDeckCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherHyperDeckEventType eventType);
    HRESULT NotifyError ([in] BMDSwitcherHyperDeckErrorType errorType);
};

/* Interface IBMDSwitcherHyperDeck - Remote Control of HyperDecks */

[
    object,
    uuid(6BB0F7E1-2013-4C8F-A4C0-1016B0C37D14),
    helpstring("Remote Control of HyperDecks")
] interface IBMDSwitcherHyperDeck : IUnknown
{
    HRESULT GetId ([out] BMDSwitcherHyperDeckId* hyperDeckId);
    HRESULT GetConnectionStatus ([out] BMDSwitcherHyperDeckConnectionStatus* status);
    HRESULT IsRemoteAccessEnabled ([out] BOOL* enabled);
    HRESULT GetStorageMediaCount ([out] unsigned int* count);
    HRESULT GetStorageMediaState ([in] unsigned int storageMediaId, [out] BMDSwitcherHyperDeckStorageMediaState* state);
    HRESULT GetActiveStorageMedia ([out] int* index);
    HRESULT SetActiveStorageMedia ([in] int index);
    HRESULT GetClipCount ([out] unsigned int* count);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetSwitcherInput ([out] BMDSwitcherInputId* inputId);
    HRESULT SetSwitcherInput ([in] BMDSwitcherInputId inputId);
    HRESULT GetFrameRate ([out] unsigned int* frameRate, [out] unsigned int* timeScale);
    HRESULT IsInterlacedVideo ([out] BOOL* isInterlaced);
    HRESULT IsDropFrameTimeCode ([out] BOOL* isDropFrame);
    HRESULT GetPlayerState ([out] BMDSwitcherHyperDeckPlayerState* state);
    HRESULT GetCurrentClip ([out] BMDSwitcherHyperDeckClipId* clipId);
    HRESULT SetCurrentClip ([in] BMDSwitcherHyperDeckClipId clipId);
    HRESULT GetCurrentClipTime ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT SetCurrentClipTime ([in] unsigned short hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT GetCurrentTimelineTime ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT SetCurrentTimelineTime ([in] unsigned short hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT GetEstimatedRecordTimeRemaining ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT Play (void);
    HRESULT Record (void);
    HRESULT Stop (void);
    HRESULT Shuttle ([in] int speedPercent);
    HRESULT GetShuttleSpeed ([out] int* speedPercent);
    HRESULT Jog ([in] int frameDelta);
    HRESULT GetLoopedPlayback ([out] BOOL* loop);
    HRESULT SetLoopedPlayback ([in] BOOL loop);
    HRESULT GetSingleClipPlayback ([out] BOOL* single);
    HRESULT SetSingleClipPlayback ([in] BOOL single);
    HRESULT GetAutoRollOnTake ([out] BOOL* autoRollOnTake);
    HRESULT SetAutoRollOnTake ([in] BOOL autoRollOnTake);
    HRESULT GetAutoRollOnTakeFrameDelay ([out] unsigned short* frameDelay);
    HRESULT SetAutoRollOnTakeFrameDelay ([in] unsigned short frameDelay);
    HRESULT GetNetworkAddress ([out] unsigned int* address);
    HRESULT SetNetworkAddress ([in] unsigned int address);
    HRESULT AddCallback ([in] IBMDSwitcherHyperDeckCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherHyperDeckCallback* callback);
};

/* Interface IBMDSwitcherMixMinusOutput - Mix-Minus Output Object */

[
    object,
    uuid(B47891B4-0AD6-4BCC-9009-4FCF51A26E4B),
    helpstring("Mix-Minus Output Object")
] interface IBMDSwitcherMixMinusOutput : IUnknown
{
    HRESULT GetAvailableAudioModes ([out] BMDSwitcherMixMinusOutputAudioMode* audioModes);
    HRESULT GetAudioMode ([out] BMDSwitcherMixMinusOutputAudioMode* audioMode);
    HRESULT SetAudioMode ([in] BMDSwitcherMixMinusOutputAudioMode audioMode);
    HRESULT HasMinusAudioInputId ([out] BOOL* hasMinusAudioInputId);
    HRESULT GetMinusAudioInputId ([out] BMDSwitcherAudioInputId* audioInputId);
    HRESULT AddCallback ([in] IBMDSwitcherMixMinusOutputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMixMinusOutputCallback* callback);
};

/* Interface IBMDSwitcherMixMinusOutputCallback - Mix-Minus Output Object Callback */

[
    object,
    uuid(D1D2EDF8-D949-49D0-8501-F001D69AB44F),
    helpstring("Mix-Minus Output Object Callback")
] interface IBMDSwitcherMixMinusOutputCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherMixMinusOutputEventType eventType);
};

/* Interface IBMDSwitcherAudioInputXLRCallback - Audio Input XLR Object Callback */

[
    object,
    uuid(829910AE-E91A-4F0B-9A58-9A5F6EBCD2AC),
    helpstring("Audio Input XLR Object Callback")
] interface IBMDSwitcherAudioInputXLRCallback : IUnknown
{
    HRESULT Notify ([in] BMDSwitcherAudioInputXLREventType eventType);
};

/* Interface IBMDSwitcherAudioInputXLR - Audio Input XLR Object */

[
    object,
    uuid(5189057A-58CD-4251-A646-683874EC58C6),
    helpstring("Audio Input XLR Object")
] interface IBMDSwitcherAudioInputXLR : IUnknown
{
    HRESULT HasRCAToXLR ([out] BOOL* hasRcaToXlr);
    HRESULT GetRCAToXLREnabled ([out] BOOL* rcaToXlrEnabled);
    HRESULT SetRCAToXLREnabled ([in] BOOL rcaToXlrEnabled);
    HRESULT AddCallback ([in] IBMDSwitcherAudioInputXLRCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherAudioInputXLRCallback* callback);
};

/* Coclasses */

importlib("stdole2.tlb");

[
    uuid(ACB00FD2-ABE1-467F-A2D5-5D77001815D1),
    helpstring("CBMDSwitcherDiscovery Class")
] coclass CBMDSwitcherDiscovery
{
    [default] interface IBMDSwitcherDiscovery;
};

// import deprecated interfaces
#include "Legacy\BMDSwitcherAPI_v3_5.idl"
#include "Legacy\BMDSwitcherAPI_v4_0.idl"
#include "Legacy\BMDSwitcherAPI_v4_1_3.idl"
#include "Legacy\BMDSwitcherAPI_v6_0.idl"
#include "Legacy\BMDSwitcherAPI_v6_4_1.idl"
#include "Legacy\BMDSwitcherAPI_v6_5_1.idl"
#include "Legacy\BMDSwitcherAPI_v6_7.idl"
#include "Legacy\BMDSwitcherAPI_v6_8.idl"
#include "Legacy\BMDSwitcherAPI_v6_9.idl"
#include "Legacy\BMDSwitcherAPI_v7_0_3.idl"
#include "Legacy\BMDSwitcherAPI_v7_1_2.idl"
#include "Legacy\BMDSwitcherAPI_v7_2.idl"
#include "Legacy\BMDSwitcherAPI_v7_5.idl"
#include "Legacy\BMDSwitcherAPI_v7_5_2.idl"
#include "Legacy\BMDSwitcherAPI_v8_0.idl"
#include "Legacy\BMDSwitcherAPI_v8_0_3.idl"
#include "Legacy\BMDSwitcherAPI_v8_1.idl"
#include "Legacy\BMDSwitcherAPI_v8_1_2.idl"
#include "Legacy\BMDSwitcherAPI_v8_3.idl"
#include "Legacy\BMDSwitcherAPI_v8_4.idl"
};
